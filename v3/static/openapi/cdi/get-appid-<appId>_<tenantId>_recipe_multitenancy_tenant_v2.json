{
  "path": "/appid-<appId>/<tenantId>/recipe/multitenancy/tenant/v2",
  "method": "get",
  "description": "Get a tenant config of the tenant specified by the url prefix.\n\nThe value of `firstFactors` can be as follows:\n- `null`: When set to `null`, the SDK will use firstFactors defined in the SDK\n- `[]` (empty array): No first factors would be enabled for the tenant\n- non-empty array: The first factors that are enabled for the tenant\n\nSuperTokens subscription license key is required if querying any tenant other than the base tenant.\n\nReturns recipes with their enabled flag and recipe specific configs saved in core\n",
  "parameters": {
    "rid": {
      "name": "rid",
      "in": "header",
      "example": "multitenancy",
      "required": false,
      "schema": {
        "type": "string"
      }
    },
    "Authorization": {
      "name": "Authorization",
      "in": "header",
      "example": "ajs30Nlbs0DjvsdFIne934n8NVee5n",
      "required": false,
      "schema": {
        "type": "string"
      }
    },
    "cdi-version": {
      "name": "cdi-version",
      "in": "header",
      "description": "X.Y of the X.Y.Z CDI version.",
      "example": "5.1",
      "schema": {
        "type": "string"
      }
    }
  },
  "body": {},
  "responses": {
    "200": {
      "description": "Tenant config result",
      "content": {
        "application/json": {
          "schema": [
            {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/statusOK"
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/tenantConfigV2"
                }
              ]
            },
            {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "TENANT_NOT_FOUND_ERROR"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "400": {
      "description": "error code 400",
      "content": {
        "text/plain": {
          "schema": {
            "type": "string"
          }
        }
      }
    },
    "401": {
      "description": "error code 401",
      "content": {
        "text/plain": {
          "schema": {
            "type": "string",
            "enum": [
              "Invalid API key"
            ]
          }
        }
      }
    },
    "402": {
      "description": "error code 402",
      "content": {
        "text/plain": {
          "schema": {
            "type": "string",
            "enum": [
              "License Error"
            ]
          }
        }
      }
    },
    "404": {
      "description": "error code 404",
      "content": {
        "text/plain": {
          "schema": {
            "type": "string",
            "enum": [
              "Not Found"
            ]
          }
        }
      }
    },
    "500": {
      "description": "error code 500",
      "content": {
        "text/plain": {
          "schema": {
            "type": "string",
            "enum": [
              "Internal Error"
            ]
          }
        }
      }
    }
  }
}
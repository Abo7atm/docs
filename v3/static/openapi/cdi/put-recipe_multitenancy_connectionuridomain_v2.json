{
  "path": "/recipe/multitenancy/connectionuridomain/v2",
  "method": "put",
  "description": "Create or update a connection uri domain.\n\nSuperTokens subscription license key is required, if not using the base connection uri domain.\n\nThis request must originate from public app and public tenant on the base\nconnection uri domain.\n\nThe `firstFactors` can be set to following values:\n\n- `null`: When set to `null`, all the login methods will be available for the connection URI domain (public app, public tenant).\n- `[]` (empty array): No login methods will be enabled for the connection URI domain (public app, public tenant).\n- `['factor1', 'factor2', ...]` (non-empty array): The list of login methods to enable for the connection URI domain (public app, public tenant). For eg. if this is set to `['emailpassword', 'thirdparty']`, the users of the tenant will be able to login using emailpassword and third party providers.\n\nList of built-in first factors are as follows:\n\n- Email password auth: `emailpassword`\n- Social login / enterprise SSO auth: `thirdparty`\n- Passwordless:\n  - With email OTP: `otp-email`\n  - With SMS OTP: `otp-phone`\n  - With email magic link: `link-email`\n  - With SMS magic link: `link-phone`\n\nIf first factors are not specified while creating a new connection uri domain, all the login methods will be enabled by default.\n\nThe `requiredSecondaryFactors` can be set to following values:\n- `null`: When set to `null`, no secondary factors will be required for the users of the connection URI domain (public app, public tenant).\n- `['factor1', 'factor2', ...]` (non-empty array): The list of factors that the users of the connection URI domain (public app, public tenant) must complete post the first factor login. For eg. if this is set to `['otp-phone', 'totp']`, the users of the tenant will be required to complete either phone OTP or TOTP post the first factor login.\n\nList of built-in secondary factors are as follows:\n\n- Email password auth: `emailpassword`\n- Social login / enterprise SSO auth: `thirdparty`\n- Passwordless:\n  - With email OTP: `otp-email`\n  - With SMS OTP: `otp-phone`\n  - With email magic link: `link-email`\n  - With SMS magic link: `link-phone`\n- Time based OTP: `totp`\n\nIf updating an existing connection uri domain,\n1. core will keep the existing state of login methods and only update the ones that are specified in the request body.\n2. Core config will be merged into existing config. To delete a key in the config, use a null value\n\nNote: The core config must contain a unique connection to the storage layer, because sharing of database between 2 different connection uri domains is not allowed.\n\nNote: Updation of core config is not allowed for the default connectionUriDomain. In order to update config for the default connectionUriDomain, you must edit the config.yaml or the docker env directly.\n",
  "headers": {
    "rid": {
      "required": false,
      "schema": {
        "type": "string"
      }
    },
    "Authorization": {
      "required": false,
      "schema": {
        "type": "string"
      }
    },
    "cdi-version": {
      "description": "X.Y of the X.Y.Z CDI version.",
      "schema": {
        "type": "string"
      }
    }
  },
  "body": {
    "schema": {
      "application/json": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "connectionUriDomain"
            ],
            "properties": {
              "connectionUriDomain": {
                "type": "string",
                "example": "core-1234.supertokens.io:3567"
              }
            }
          },
          {
            "$ref": "#/components/schemas/tenantInputV2"
          }
        ]
      }
    }
  },
  "responses": {
    "200": {
      "description": "Create or Update connection uri domain result",
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "required": [
              "status",
              "createdNew"
            ],
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "OK"
                ]
              },
              "createdNew": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "400": {
      "description": "error code 400",
      "content": {
        "text/plain": {
          "schema": {
            "type": "string"
          }
        }
      }
    },
    "401": {
      "description": "error code 401",
      "content": {
        "text/plain": {
          "schema": {
            "type": "string",
            "enum": [
              "Invalid API key"
            ]
          }
        }
      }
    },
    "402": {
      "description": "error code 402",
      "content": {
        "text/plain": {
          "schema": {
            "type": "string",
            "enum": [
              "License Error"
            ]
          }
        }
      }
    },
    "404": {
      "description": "error code 404",
      "content": {
        "text/plain": {
          "schema": {
            "type": "string",
            "enum": [
              "Not Found"
            ]
          }
        }
      }
    },
    "500": {
      "description": "error code 500",
      "content": {
        "text/plain": {
          "schema": {
            "type": "string",
            "enum": [
              "Internal Error"
            ]
          }
        }
      }
    }
  }
}
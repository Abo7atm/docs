openapi: 3.0.0
info:
  description: |
    This is the API exposed by the SuperTokens Core. To be consumed by your backend only.

    `appid-<appId>` and `<tenantId>` in all the APIs are optional. Their default values are `appid-public` and `public` respectively.

    Those that do not have `<tenantId>` in the path will enforce that the API is called from `public` tenant only.

  version: 5.1.1
  title: Core Driver Interface
  contact:
    email: team@supertokens.io
tags:
  - name: EmailPassword Recipe
  - name: ThirdParty Recipe
  - name: Passwordless Recipe
  - name: EmailVerification Recipe
  - name: User Metadata Recipe
  - name: User Roles Recipe
  - name: UserIdMapping Recipe
  - name: Session Recipe
  - name: Multitenancy Recipe
  - name: Core
  - name: Dashboard Recipe
  - name: Totp Recipe
  - name: Account Linking Recipe

paths:
  /appid-<appId>/recipe/accountlinking/user/primary/check:
    get:
      tags:
        - Account Linking Recipe
      operationId: canCreatePrimaryUser
      summary: Check primary user creation possibility
      description: |
        Check if primary user can be created for given user id
      parameters:
        - $ref: "#/components/parameters/accountLinkingRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
        - in: query
          name: recipeUserId
          schema:
            type: string
            description: The recipe user ID to check
            example: fa7a0841-b533-4478-9253-0fde890c576
          required: true
      responses:
        "200":
          description: Indicates success with the status and canCreatePrimaryUser properties
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Primary User Check Success
                    description: Response when user can be created as primary
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      wasAlreadyAPrimaryUser:
                        type: boolean
                        description: Indicates if the user was already a primary user
                        example: true
                  - type: object
                    title: Account Info Already Associated Error
                    description: Response when account info is already associated with another primary user
                    properties:
                      status:
                        type: string
                        enum: ["ACCOUNT_INFO_ALREADY_ASSOCIATED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR"]
                      primaryUserId:
                        type: string
                        description: The ID of the primary user that already has this account info
                        example: fa7a0841-b533-4478-9253-0fde890c576
                      description:
                        type: string
                        description: Error description
                  - type: object
                    title: Recipe User Already Linked Error
                    description: Response when recipe user is already linked with a primary user
                    properties:
                      status:
                        type: string
                        enum: ["RECIPE_USER_ID_ALREADY_LINKED_WITH_PRIMARY_USER_ID_ERROR"]
                      primaryUserId:
                        type: string
                        description: The ID of the primary user this recipe user is already linked to
                        example: fa7a0841-b533-4478-9253-0fde890c576
                      description:
                        type: string
                        description: Error description
        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/recipe/accountlinking/user/link/check:
    get:
      tags:
        - Account Linking Recipe
      operationId: canLinkAccounts
      summary: Check account linking possibility
      description: |
        Check if accounts can be linked for given primary and recipe user id
      parameters:
        - $ref: "#/components/parameters/accountLinkingRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
        - in: query
          name: primaryUserId
          schema:
            type: string
            description: The primary user ID to check
            example: fa7a0841-b533-4478-9253-0fde890c576
          required: true
        - in: query
          name: recipeUserId
          schema:
            type: string
            description: The recipe user ID to check
            example: fa7a0841-b533-4478-9253-0fde890c576
          required: true
      responses:
        "200":
          description: Indicates success with the status prop
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Account Linking Check Success
                    description: Response when accounts can be linked
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      accountsAlreadyLinked:
                        type: boolean
                        description: Indicates if accounts are already linked
                        example: true
                  - type: object
                    title: Account Info Already Associated Error
                    description: Response when account info is already associated with another primary user
                    properties:
                      status:
                        type: string
                        enum: ["ACCOUNT_INFO_ALREADY_ASSOCIATED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR"]
                      primaryUserId:
                        type: string
                        description: The ID of the primary user that already has this account info
                        example: fa7a0841-b533-4478-9253-0fde890c576
                      description:
                        type: string
                        description: Error description
                  - type: object
                    title: Recipe User Already Linked Error
                    description: Response when recipe user is already linked with another primary user
                    properties:
                      status:
                        type: string
                        enum: ["RECIPE_USER_ID_ALREADY_LINKED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR"]
                      primaryUserId:
                        type: string
                        description: The ID of the primary user this recipe user is already linked to
                        example: fa7a0841-b533-4478-9253-0fde890c576
                      description:
                        type: string
                        description: Error description
                  - type: object
                    title: Not Primary User Error
                    description: Response when input user is not a primary user
                    properties:
                      status:
                        type: string
                        enum: ["INPUT_USER_IS_NOT_A_PRIMARY_USER"]
        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/recipe/accountlinking/user/primary:
    post:
      tags:
        - Account Linking Recipe
      operationId: createPrimaryUser
      summary: Create primary user account
      description: |
        Create a primary user for given user id
      parameters:
        - $ref: "#/components/parameters/accountLinkingRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeUserId:
                  type: string
                  description: The recipe user ID to create as primary user
                  example: fa7a0841-b533-4478-9253-0fde890c576
              required:
                - recipeUserId
      responses:
        "200":
          description: Indicates success with the status and primaryUserId properties
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Primary User Creation Success
                    description: Response when primary user is created successfully
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      wasAlreadyAPrimaryUser:
                        type: boolean
                        description: Indicates if the user was already a primary user
                        example: true
                      user:
                        $ref: "#/components/schemas/authRecipeUser"
                  - type: object
                    title: Account Info Already Associated Error
                    description: Response when account info is already associated with another primary user
                    properties:
                      status:
                        type: string
                        enum: ["ACCOUNT_INFO_ALREADY_ASSOCIATED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR"]
                      primaryUserId:
                        type: string
                        description: The ID of the primary user that already has this account info
                        example: fa7a0841-b533-4478-9253-0fde890c576
                      description:
                        type: string
                        description: Error description
                  - type: object
                    title: Recipe User Already Linked Error
                    description: Response when recipe user is already linked with a primary user
                    properties:
                      status:
                        type: string
                        enum: ["RECIPE_USER_ID_ALREADY_LINKED_WITH_PRIMARY_USER_ID_ERROR"]
                      primaryUserId:
                        type: string
                        description: The ID of the primary user this recipe user is already linked to
                        example: fa7a0841-b533-4478-9253-0fde890c576
                      description:
                        type: string
                        description: Error description
        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "402":
          $ref: "#/components/responses/402"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/recipe/accountlinking/user/link:
    post:
      tags:
        - Account Linking Recipe
      operationId: linkAccounts
      summary: Link user accounts together
      description: |
        Link accounts for given primary and recipe user id
      parameters:
        - $ref: "#/components/parameters/accountLinkingRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                primaryUserId:
                  type: string
                  description: The primary user ID to link with
                  example: fa7a0841-b533-4478-9253-0fde890c576
                recipeUserId:
                  type: string
                  description: The recipe user ID to link
                  example: fa7a0841-b533-4478-9253-0fde890c576
              required:
                - primaryUserId
                - recipeUserId
      responses:
        "200":
          description: Indicates success with the status and accountsAlreadyLinked properties
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Account Linking Success
                    description: Response when accounts are linked successfully
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      accountsAlreadyLinked:
                        type: boolean
                        description: Indicates if accounts were already linked
                        example: true
                      user:
                        $ref: "#/components/schemas/authRecipeUser"
                  - type: object
                    title: Account Info Already Associated Error
                    description: Response when account info is already associated with another primary user
                    properties:
                      status:
                        type: string
                        enum: ["ACCOUNT_INFO_ALREADY_ASSOCIATED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR"]
                      primaryUserId:
                        type: string
                        description: The ID of the primary user that already has this account info
                        example: fa7a0841-b533-4478-9253-0fde890c576
                      description:
                        type: string
                        description: Error description
                  - type: object
                    title: Recipe User Already Linked Error
                    description: Response when recipe user is already linked with another primary user
                    properties:
                      status:
                        type: string
                        enum: ["RECIPE_USER_ID_ALREADY_LINKED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR"]
                      primaryUserId:
                        type: string
                        description: The ID of the primary user this recipe user is already linked to
                        example: fa7a0841-b533-4478-9253-0fde890c576
                      user:
                        $ref: "#/components/schemas/authRecipeUser"
                      description:
                        type: string
                        description: Error description
                  - type: object
                    title: Not Primary User Error
                    description: Response when input user is not a primary user
                    properties:
                      status:
                        type: string
                        enum: ["INPUT_USER_IS_NOT_A_PRIMARY_USER"]
        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "402":
          $ref: "#/components/responses/402"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/recipe/accountlinking/user/unlink:
    post:
      tags:
        - Account Linking Recipe
      operationId: unlinkAccounts
      summary: Unlink user accounts
      description: |
        Unlink accounts for given recipe user id
      parameters:
        - $ref: "#/components/parameters/accountLinkingRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeUserId:
                  type: string
                  description: The recipe user ID to unlink
                  example: fa7a0841-b533-4478-9253-0fde890c576
              required:
                - recipeUserId
      responses:
        "200":
          description: Indicates success with the status and accountsUnlinked properties
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Account Unlinking Success
                    description: Response when accounts are unlinked successfully
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      wasRecipeUserDeleted:
                        type: boolean
                        description: Indicates if the recipe user was deleted
                        example: true
                      wasLinked:
                        type: boolean
                        description: Indicates if the accounts were linked
                        example: true
        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/recipe/totp/device:
    post:
      tags:
        - Totp Recipe
      operationId: createTotpDevice
      summary: Add TOTP device for user
      description: |
        Add a TOTP device for a user and enable TOTP if not already enabled.
      parameters:
        - $ref: "#/components/parameters/totpRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/userId"
                deviceName:
                  type: string
                  description: Name of the TOTP device
                  example: "My Authy App"
                skew:
                  type: number
                  description: Time skew in seconds for TOTP validation
                  example: 0
                period:
                  type: number
                  description: Time period in seconds for TOTP code generation
                  example: 30
              required:
                - userId
                - skew
                - period
      responses:
        "200":
          description: Indicates success with the status and secret properties
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: TOTP Device Creation Success
                    description: Response when TOTP device is created successfully
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      secret:
                        type: string
                        description: The TOTP secret key for the device
                        example: "JBSWY3DPEHPK3PXP"
                      deviceName:
                        type: string
                        description: Name of the created TOTP device
                        example: d1
                  - type: object
                    title: Device Already Exists Error
                    description: Response when TOTP device already exists
                    properties:
                      status:
                        type: string
                        enum: ["DEVICE_ALREADY_EXISTS_ERROR"]

        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"
    put:
      tags:
        - Totp Recipe
      operationId: updateTotpDeviceName
      summary: Update TOTP device name
      description: |
        Update the name of a TOTP device for a user.
      parameters:
        - $ref: "#/components/parameters/totpRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/userId"
                existingDeviceName:
                  type: string
                  description: Current name of the TOTP device
                  example: "My Authy App"
                newDeviceName:
                  type: string
                  description: New name for the TOTP device
                  example: "A better name for my TOTP device"
              required:
                - userId
                - existingDeviceName
                - newDeviceName
      responses:
        "200":
          description: Indicates success with the status property
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Device Name Update Success
                    description: Response when TOTP device name is updated successfully
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                  - type: object
                    title: Unknown Device Error
                    description: Response when TOTP device is not found
                    properties:
                      status:
                        type: string
                        enum: ["UNKNOWN_DEVICE_ERROR"]
                  - type: object
                    title: Device Already Exists Error
                    description: Response when new device name already exists
                    properties:
                      status:
                        type: string
                        enum: ["DEVICE_ALREADY_EXISTS_ERROR"]

        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/recipe/totp/device/list:
    get:
      tags:
        - Totp Recipe
      operationId: getTotpDevices
      summary: List user TOTP devices
      description: |
        Retrieve a list of TOTP devices for a user.
      parameters:
        - $ref: "#/components/parameters/totpRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
        - in: query
          name: userId
          schema:
            type: string
            description: The user ID to get TOTP devices for
          required: true
      responses:
        "200":
          description: Retrives all TOTP devices
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: TOTP Devices List
                    description: Response containing list of TOTP devices
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      devices:
                        type: array
                        description: List of TOTP devices
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              description: Name of the TOTP device
                            period:
                              type: number
                              description: Time period in seconds for TOTP code generation
                            skew:
                              type: number
                              description: Time skew in seconds for TOTP validation
                            verified:
                              type: boolean
                              description: Whether the device has been verified
                    required:
                      - status

        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"
  /recipe/totp/device/import:
    post:
      tags:
        - Totp Recipe
      operationId: importTotpDevice
      summary: Import existing TOTP device
      description: |
        Add a TOTP device for a user and enable TOTP if not already enabled.
      parameters:
        - $ref: "#/components/parameters/totpRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/userId"
                deviceName:
                  type: string
                  description: Name of the TOTP device
                  example: "My Authy App"
                skew:
                  type: number
                  description: Time skew in seconds for TOTP validation
                  example: 0
                period:
                  type: number
                  description: Time period in seconds for TOTP code generation
                  example: 30
                secretKey:
                  type: string
                  description: The TOTP secret key for the device
                  example: "BSWY3DPEMOWNFUWJLDIWNDNDPONBIUFG"
              required:
                - userId
                - skew
                - period
                - secretKey
      responses:
        "200":
          description: Indicates success with the status and secret properties
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: TOTP Device Import Success
                    description: Response when TOTP device is imported successfully
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      deviceName:
                        type: string
                        description: Name of the imported TOTP device
                        example: d1
                  - type: object
                    title: Device Already Exists Error
                    description: Response when TOTP device already exists
                    properties:
                      status:
                        type: string
                        enum: ["DEVICE_ALREADY_EXISTS_ERROR"]

        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/recipe/totp/device/remove:
    post:
      tags:
        - Totp Recipe
      operationId: removeTotpDevice
      summary: Remove TOTP device
      description: |
        Remove a TOTP device for a user. If all devices are removed, TOTP is disabled for the user.
      parameters:
        - $ref: "#/components/parameters/totpRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/userId"
                deviceName:
                  type: string
                  description: Name of the TOTP device to remove
                  example: "My Authy App"
              required:
                - userId
                - deviceName
      responses:
        "200":
          description: Indicates success with the status property
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: TOTP Device Removal Success
                    description: Response when TOTP device is removed successfully
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      didDeviceExist:
                        type: boolean
                        description: Indicates if the device existed before removal
                        example: true

        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/<tenantId>/recipe/totp/verify:
    post:
      tags:
        - Totp Recipe
      operationId: verifyTotpCode
      summary: Verify TOTP code
      description: |
        Check if a TOTP code is valid against any of the TOTP devices for a user.
      parameters:
        - $ref: "#/components/parameters/totpRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/userId"
                totp:
                  type: string
                  description: The TOTP code to verify
                  example: "123456"
                allowUnverifiedDevices:
                  type: boolean
                  description: Whether to allow verification against unverified devices
                  example: false
              required:
                - userId
                - totp
                - allowUnverifiedDevices
      responses:
        "200":
          description: Indicates success with the status property
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: TOTP Verification Success
                    description: Response when TOTP code is valid
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                  - type: object
                    title: Invalid TOTP Error
                    description: Response when TOTP code is invalid
                    properties:
                      status:
                        type: string
                        enum: ["INVALID_TOTP_ERROR"]
                      currentNumberOfFailedAttempts:
                        type: number
                        description: Current number of failed verification attempts
                        example: 2
                      maxNumberOfFailedAttempts:
                        type: number
                        description: Maximum allowed failed verification attempts
                        example: 5
                  - type: object
                    title: Unknown User Error
                    description: Response when user ID is not found
                    properties:
                      status:
                        type: string
                        enum: ["UNKNOWN_USER_ID_ERROR"]
                  - type: object
                    title: Rate Limit Error
                    description: Response when rate limit is reached
                    properties:
                      status:
                        type: string
                        enum: ["LIMIT_REACHED_ERROR"]
                      retryAfterMs:
                        type: number
                        description: Time in milliseconds to wait before retrying
                        example: 90000
                      currentNumberOfFailedAttempts:
                        type: number
                        description: Current number of failed verification attempts
                        example: 2
                      maxNumberOfFailedAttempts:
                        type: number
                        description: Maximum allowed failed verification attempts
                        example: 5
        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/<tenantId>/recipe/totp/device/verify:
    post:
      tags:
        - Totp Recipe
      operationId: verifyTotpDevice
      summary: Verify TOTP device
      description: |
        Mark a TOTP device as verified if the given TOTP code is valid for that device.
      parameters:
        - $ref: "#/components/parameters/totpRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/userId"
                deviceName:
                  type: string
                  description: Name of the TOTP device to verify
                  example: "My Authy App"
                totp:
                  type: string
                  description: The TOTP code to verify
                  example: "123456"
              required:
                - userId
                - deviceName
                - totp
      responses:
        "200":
          description: Indicates success with the status property
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Device Verification Success
                    description: Response when TOTP device is verified successfully
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      wasAlreadyVerified:
                        type: boolean
                        description: Indicates if the device was already verified
                        example: false
                  - type: object
                    title: Unknown Device Error
                    description: Response when TOTP device is not found
                    properties:
                      status:
                        type: string
                        enum: ["UNKNOWN_DEVICE_ERROR"]
                  - type: object
                    title: Invalid TOTP Error
                    description: Response when TOTP code is invalid
                    properties:
                      status:
                        type: string
                        enum: ["INVALID_TOTP_ERROR"]
                      currentNumberOfFailedAttempts:
                        type: number
                        description: Current number of failed verification attempts
                        example: 2
                      maxNumberOfFailedAttempts:
                        type: number
                        description: Maximum allowed failed verification attempts
                        example: 5
                  - type: object
                    title: Rate Limit Error
                    description: Response when rate limit is reached
                    properties:
                      status:
                        type: string
                        enum: ["LIMIT_REACHED_ERROR"]
                      retryAfterMs:
                        type: number
                        description: Time in milliseconds to wait before retrying
                        example: 90000
                      currentNumberOfFailedAttempts:
                        type: number
                        description: Current number of failed verification attempts
                        example: 2
                      maxNumberOfFailedAttempts:
                        type: number
                        description: Maximum allowed failed verification attempts
                        example: 5
        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/recipe/userid/map:
    post:
      tags:
        - UserIdMapping Recipe
      operationId: userIdMappingCreateMapping
      summary: Create user ID mapping
      description: |
        Create a mapping between a SuperTokens userId and an external userId.
      parameters:
        - $ref: "#/components/parameters/userIdMappingRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                superTokensUserId:
                  $ref: "#/components/schemas/userId"
                externalUserId:
                  type: string
                  description: The external user ID to map to
                  example: "externalId"
                externalUserIdInfo:
                  type: string
                  description: Additional information about the external user ID
                  example: "Info about external userId"
                force:
                  type: boolean
                  description: Whether to force create the mapping even if it exists
              required:
                - superTokensUserId
                - externalUserId
      responses:
        "200":
          description: Indicates success with the status property
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"

                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ["UNKNOWN_SUPERTOKENS_USER_ID_ERROR"]

                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ["USER_ID_MAPPING_ALREADY_EXISTS_ERROR"]
                      doesSuperTokensUserIdExist:
                        type: boolean
                      doesExternalUserIdExist:
                        type: boolean

        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"
    get:
      tags:
        - UserIdMapping Recipe
      operationId: userIdMappingGetMapping
      summary: Get user ID mapping
      description: |
        Retrieve a UserIdMapping
      parameters:
        - $ref: "#/components/parameters/userIdMappingRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
        - in: query
          name: userId
          schema:
            type: string
            description: The user ID to get mapping for
          required: true
        - in: query
          name: userIdType
          schema:
            type: string
            description: Type of user ID to search for
            enum: ["SUPERTOKENS", "EXTERNAL", "ANY"]
      responses:
        "200":
          description: Retrives a userId mapping
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: User ID Mapping Found
                    description: Response containing the user ID mapping
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      superTokensUserId:
                        $ref: "#/components/schemas/userId"
                      externalUserId:
                        type: string
                        description: The external user ID
                        example: "externalId"
                      externalUserIdInfo:
                        type: string
                        description: Additional information about the external user ID
                        example: "Info about external userId"
                    required:
                      - status
                      - superTokensUserId
                      - externalUserId
                  - type: object
                    title: Unknown Mapping Error
                    description: Response when user ID mapping is not found
                    properties:
                      status:
                        type: string
                        enum: ["UNKNOWN_MAPPING_ERROR"]

        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/recipe/userid/map/remove:
    post:
      tags:
        - UserIdMapping Recipe
      operationId: userIdMappingRemoveMapping
      summary: Remove user ID mapping
      description: |
        Delete a mapping between a SuperTokens userId and an external userId.
      parameters:
        - $ref: "#/components/parameters/userIdMappingRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/userId"
                userIdType:
                  type: string
                  description: Type of user ID to remove mapping for
                  enum: ["SUPERTOKENS", "EXTERNAL", "ANY"]
                force:
                  type: boolean
                  description: Whether to force remove the mapping
              required:
                - userId
      responses:
        "200":
          description: Indicates success with the status property
          content:
            application/json:
              schema:
                type: object
                title: User ID Mapping Removal Success
                description: Response when user ID mapping is removed successfully
                properties:
                  status:
                    $ref: "#/components/schemas/statusOK"
                  didMappingExist:
                    type: boolean
                    description: Indicates if the mapping existed before removal

        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/recipe/userid/external-user-id-info:
    put:
      tags:
        - UserIdMapping Recipe
      operationId: userIdMappingUpateExternalUserIdInfo
      summary: Update external user info
      description: |
        Update or delete externalUserIdInfo
      parameters:
        - $ref: "#/components/parameters/userIdMappingRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/userId"
                userIdType:
                  type: string
                  description: Type of user ID to update info for
                  enum: ["SUPERTOKENS", "EXTERNAL", "ANY"]
                externalUserIdInfo:
                  type: string
                  description: New external user ID information
                  example: "new external userId info"
                  nullable: true
              required:
                - userId
                - externalUserIdInfo
      responses:
        "200":
          description: Indicates success with the status property
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: External User Info Update Success
                    description: Response when external user info is updated successfully
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                  - type: object
                    title: Unknown Mapping Error
                    description: Response when user ID mapping is not found
                    properties:
                      status:
                        type: string
                        enum: ["UNKNOWN_MAPPING_ERROR"]

        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/<tenantId>/recipe/signinup/code/check:
    post:
      tags:
        - Passwordless Recipe
      operationId: passwordlessCheckCode
      summary: Check passwordless code
      description: |
        Tries to check if the passed userInputCode+deviceId combo or the linkCode is valid
      parameters:
        - $ref: "#/components/parameters/passwordlessRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  title: Link Code Check
                  description: Request to check a link code
                  properties:
                    preAuthSessionId:
                      $ref: "#/components/schemas/preAuthSessionId"
                    linkCode:
                      $ref: "#/components/schemas/linkCode"
                  required:
                    - preAuthSessionId
                    - linkCode
                - type: object
                  title: User Input Code Check
                  description: Request to check a user input code
                  properties:
                    preAuthSessionId:
                      $ref: "#/components/schemas/preAuthSessionId"
                    deviceId:
                      $ref: "#/components/schemas/deviceId"
                    userInputCode:
                      $ref: "#/components/schemas/userInputCode"
                  required:
                    - preAuthSessionId
                    - deviceId
                    - userInputCode
      responses:
        "200":
          description: Indicates success with the status property
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Code Check Success
                    description: Response when code is valid
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      consumedDevice:
                        type: object
                        description: Information about the consumed device
                        required:
                          - preAuthSessionId
                          - failedCodeInputAttemptCount
                        properties:
                          preAuthSessionId:
                            $ref: "#/components/schemas/preAuthSessionId"
                          failedCodeInputAttemptCount:
                            type: number
                            description: Number of failed code input attempts
                            example: 2
                          email:
                            $ref: "#/components/schemas/email"
                          phoneNumber:
                            $ref: "#/components/schemas/phoneNumber"
                  - type: object
                    title: Invalid Code Error
                    description: Response when code is invalid or expired
                    properties:
                      status:
                        type: string
                        enum: ["INCORRECT_USER_INPUT_CODE_ERROR", "EXPIRED_USER_INPUT_CODE_ERROR"]
                      failedCodeInputAttemptCount:
                        type: number
                        description: Number of failed code input attempts
                        example: 2
                      maximumCodeInputAttempts:
                        type: number
                        description: Maximum allowed code input attempts
                        example: 5
                  - type: object
                    title: Restart Flow Error
                    description: Response when flow needs to be restarted
                    properties:
                      status:
                        type: string
                        enum: ["RESTART_FLOW_ERROR"]

        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/<tenantId>/recipe/signinup/code/consume:
    post:
      tags:
        - Passwordless Recipe
      operationId: passwordlessTryUseCode
      summary: Consume passwordless code
      description: |
        Tries to consume the passed userInputCode+deviceId combo or the linkCode to sign the user in
      parameters:
        - $ref: "#/components/parameters/passwordlessRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  title: Link Code Consume
                  description: Request to consume a link code
                  properties:
                    preAuthSessionId:
                      $ref: "#/components/schemas/preAuthSessionId"
                    linkCode:
                      $ref: "#/components/schemas/linkCode"
                  required:
                    - preAuthSessionId
                    - linkCode
                - type: object
                  title: User Input Code Consume
                  description: Request to consume a user input code
                  properties:
                    preAuthSessionId:
                      $ref: "#/components/schemas/preAuthSessionId"
                    deviceId:
                      $ref: "#/components/schemas/deviceId"
                    userInputCode:
                      $ref: "#/components/schemas/userInputCode"
                  required:
                    - preAuthSessionId
                    - deviceId
                    - userInputCode
      responses:
        "200":
          description: Indicates success with the status property
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Code Consume Success
                    description: Response when code is consumed successfully
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      createdNewUser:
                        type: boolean
                        description: Indicates if a new user was created
                        example: true
                      user:
                        $ref: "#/components/schemas/authRecipeUser"
                      recipeUserId:
                        $ref: "#/components/schemas/userId"
                      consumedDevice:
                        type: object
                        description: Information about the consumed device
                        required:
                          - preAuthSessionId
                          - failedCodeInputAttemptCount
                        properties:
                          preAuthSessionId:
                            $ref: "#/components/schemas/preAuthSessionId"
                          failedCodeInputAttemptCount:
                            type: number
                            description: Number of failed code input attempts
                            example: 2
                          email:
                            $ref: "#/components/schemas/email"
                          phoneNumber:
                            $ref: "#/components/schemas/phoneNumber"
                  - type: object
                    title: Invalid Code Error
                    description: Response when code is invalid or expired
                    properties:
                      status:
                        type: string
                        enum: ["INCORRECT_USER_INPUT_CODE_ERROR", "EXPIRED_USER_INPUT_CODE_ERROR"]
                      failedCodeInputAttemptCount:
                        type: number
                        description: Number of failed code input attempts
                        example: 2
                      maximumCodeInputAttempts:
                        type: number
                        description: Maximum allowed code input attempts
                        example: 5
                  - type: object
                    title: Restart Flow Error
                    description: Response when flow needs to be restarted
                    properties:
                      status:
                        type: string
                        enum: ["RESTART_FLOW_ERROR"]

        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/<tenantId>/recipe/signinup/code:
    post:
      tags:
        - Passwordless Recipe
      operationId: passwordlessStartSignIn
      summary: Start passwordless sign in
      description: |
        Starts a sign in process by requesting a linkCode and a deviceId + userInputCode combination the user can use to sign in.
        Passing the optional deviceId signifies a resend code flow.
      parameters:
        - $ref: "#/components/parameters/passwordlessRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  title: Email Sign In
                  description: Request to start email-based sign in
                  properties:
                    email:
                      $ref: "#/components/schemas/email"
                    userInputCode:
                      $ref: "#/components/schemas/userInputCode"
                  example:
                    email: "test@example.com"
                  required:
                    - email
                - type: object
                  title: Phone Sign In
                  description: Request to start phone-based sign in
                  properties:
                    phoneNumber:
                      $ref: "#/components/schemas/phoneNumber"
                    userInputCode:
                      $ref: "#/components/schemas/userInputCode"
                  required:
                    - phoneNumber
                - type: object
                  title: Resend Code
                  description: Request to resend code to existing device
                  properties:
                    deviceId:
                      $ref: "#/components/schemas/deviceId"
                    userInputCode:
                      $ref: "#/components/schemas/userInputCode"
                  required:
                    - deviceId
      responses:
        "200":
          description: Starts the passwordless login process
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"

                      preAuthSessionId:
                        $ref: "#/components/schemas/preAuthSessionId"

                      codeId:
                        $ref: "#/components/schemas/codeId"

                      deviceId:
                        $ref: "#/components/schemas/deviceId"

                      userInputCode:
                        $ref: "#/components/schemas/userInputCode"

                      linkCode:
                        $ref: "#/components/schemas/linkCode"

                      timeCreated:
                        $ref: "#/components/schemas/timeCreated"

                      codeLifetime:
                        $ref: "#/components/schemas/codeLifetime"
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ["RESTART_FLOW_ERROR", "USER_INPUT_CODE_ALREADY_USED_ERROR"]

        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/<tenantId>/recipe/signinup/code/remove:
    post:
      tags:
        - Passwordless Recipe
      operationId: passwordlessRevokeCode
      description: |
        Revokes a code by id
      parameters:
        - $ref: "#/components/parameters/passwordlessRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    codeId:
                      $ref: "#/components/schemas/codeId"
                  required:
                    - codeId
                - type: object
                  properties:
                    preAuthSessionId:
                      $ref: "#/components/schemas/preAuthSessionId"
                  required:
                    - preAuthSessionId
      responses:
        "200":
          description: "The operation was successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/statusOK"

        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/<tenantId>/recipe/signinup/codes:
    get:
      tags:
        - Passwordless Recipe
      operationId: passwordlessListCodes
      description: |
        Lists all active passwordless codes of the user
      parameters:
        - $ref: "#/components/parameters/passwordlessRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
        - in: query
          name: email
          description: Use this parameter to get information about all devices associated with an email (without the other query params)
          schema:
            type: string
        - in: query
          name: phoneNumber
          description: Use this parameter to get information about all devices associated with a phoneNumber (without the other query params)
          schema:
            $ref: "#/components/schemas/phoneNumber"
        - in: query
          name: deviceId
          description: Use this parameter to get information about a single device (without the other query params)
          schema:
            $ref: "#/components/schemas/deviceId"
        - in: query
          name: preAuthSessionId
          description: Use this parameter to get information about a single device (without the other query params)
          schema:
            $ref: "#/components/schemas/preAuthSessionId"
      responses:
        "200":
          description: List of all active passwordless codes of the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/statusOK"
                  devices:
                    type: array
                    items:
                      type: object
                      properties:
                        preAuthSessionId:
                          $ref: "#/components/schemas/preAuthSessionId"
                        failedCodeInputAttemptCount:
                          type: number
                          example: 2
                        email:
                          $ref: "#/components/schemas/email"
                        phoneNumber:
                          $ref: "#/components/schemas/phoneNumber"
                        codes:
                          type: array
                          items:
                            type: object
                            properties:
                              codeId:
                                $ref: "#/components/schemas/codeId"
                              timeCreated:
                                $ref: "#/components/schemas/timeCreated"
                              codeLifetime:
                                $ref: "#/components/schemas/codeLifetime"

        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/<tenantId>/recipe/signinup/codes/remove:
    post:
      tags:
        - Passwordless Recipe
      operationId: passwordlessRevokeAllCodesOfUser
      description: |
        Revokes all codes issued for the user
      parameters:
        - $ref: "#/components/parameters/passwordlessRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    email:
                      $ref: "#/components/schemas/email"
                  required:
                    - email
                - type: object
                  properties:
                    phoneNumber:
                      $ref: "#/components/schemas/phoneNumber"
                  required:
                    - phoneNumber
      responses:
        "200":
          description: "The operation was successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/statusOK"

        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"

  /appid-<appId>/<tenantId>/recipe/user⠀⠀:
    get:
      tags:
        - Passwordless Recipe
      operationId: passwordlessGetUser
      deprecated: true
      description: |
        Get a user's information.

        API is tenant specific if querying by email or phone number.
        If querying by userId, tenantId will be ignored.

        Note that there is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec.

      parameters:
        - $ref: "#/components/parameters/passwordlessRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
        - $ref: "#/components/parameters/userId"
        - in: query
          name: email
          description: Use exactly one of phoneNumber, email or userId
          schema:
            $ref: "#/components/schemas/email"
        - in: query
          name: phoneNumber
          description: Use exactly one of phoneNumber, email or userId
          schema:
            $ref: "#/components/schemas/phoneNumber"
      responses:
        "200":
          description: Get a user's information.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/statusOK"
                      user:
                        $ref: "#/components/schemas/authRecipeUser"
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ["UNKNOWN_USER_ID_ERROR", "UNKNOWN_EMAIL_ERROR", "UNKNOWN_PHONE_NUMBER_ERROR"]

        "400":
          $ref: "#/components/responses/400"

        "401":
          $ref: "#/components/responses/401"

        "404":
          $ref: "#/components/responses/404"

        "500":
          $ref: "#/components/responses/500"
    put:
      tags:
        - Passwordless Recipe
      operationId: passwordlessPutUser
      description: |
        Update a user's information.
        If the email or phoneNumber is set to null the previous value will be deleted. If they are not set (i.e., undefined/missing from the request), they are left as-is.
      parameters:
        - $ref: "#/components/parameters/passwordlessRid"
        - $ref: "#/components/parameters/api-key"
        - $ref: "#/components/parameters/cdi-version"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeUserId:
                  $ref: "#/components/schemas/userId"
                email:
                  type: string
                  example: johndoe@gmail.com
                  nullable: true
                phoneNumber:
                  type: string
                  example: "+14155552671"
                  nullable: true
              required:
                - userId

      responses:
        "200":
          description: update user's information
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        enum:
                          [
                            "OK",
                            "UNKNOWN_USER_ID_ERROR",
                            "EMAIL_ALREADY_EXISTS_ERROR",
                            "PHONE_NUMBER_ALREADY_EXISTS_ERROR",
                          ]
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ["EMAIL_CHANGE_NOT_ALLOWED_ERROR", "PHONE_NUMBER_CHANGE_NOT_ALLOWED_ERROR"]
                      reason:
                        type: string

        "400":
          $ref: "#/components/responses/400"

{
  "path": "/appid-<appId>/recipe/jwt",
  "method": "post",
  "description": "Create a signed JWT\n",
  "parameters": {
    "rid": {
      "name": "rid",
      "in": "header",
      "example": "jwt",
      "required": false,
      "schema": {
        "type": "string"
      }
    },
    "Authorization": {
      "name": "Authorization",
      "in": "header",
      "example": "ajs30Nlbs0DjvsdFIne934n8NVee5n",
      "required": false,
      "schema": {
        "type": "string"
      }
    },
    "cdi-version": {
      "name": "cdi-version",
      "in": "header",
      "description": "X.Y of the X.Y.Z CDI version.",
      "example": "5.1",
      "schema": {
        "type": "string"
      }
    }
  },
  "body": {
    "schema": {
      "application/json": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "dictionary",
            "description": "The payload of the JWT, should be a JSON object.",
            "example": {
              "custom-claim": ""
            }
          },
          "algorithm": {
            "type": "string",
            "description": "The algorithm to use when creating the JWT.",
            "enum": [
              "RS256"
            ]
          },
          "jwksDomain": {
            "type": "string",
            "description": "This is used as the value for the issuer claim in the JWT payload.",
            "example": "https://api.test.com/"
          },
          "validity": {
            "type": "number",
            "description": "Duration in seconds, used to calculate JWT expiry",
            "example": 86400
          },
          "useStaticSigningKey": {
            "type": "boolean",
            "description": "Decides if the token should be signed with a dynamic or static key, defaults to true",
            "example": true
          }
        }
      }
    }
  },
  "responses": {
    "200": {
      "description": "Create a signed JWT",
      "content": {
        "application/json": {
          "schema": [
            {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "OK"
                  ]
                },
                "jwt": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                }
              }
            },
            {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "UNSUPPORTED_ALGORITHM_ERROR"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "400": {
      "description": "error code 400",
      "content": {
        "text/plain": {
          "schema": {
            "type": "string"
          }
        }
      }
    },
    "404": {
      "description": "error code 404",
      "content": {
        "text/plain": {
          "schema": {
            "type": "string",
            "enum": [
              "Not Found"
            ]
          }
        }
      }
    },
    "500": {
      "description": "error code 500",
      "content": {
        "text/plain": {
          "schema": {
            "type": "string",
            "enum": [
              "Internal Error"
            ]
          }
        }
      }
    }
  }
}
{
  "path": "/{apiBasePath}/oauth/introspect",
  "method": "post",
  "description": "Introspects an access/refresh token\n",
  "parameters": {
    "apiBasePath": {
      "name": "apiBasePath",
      "in": "path",
      "description": "Its value depends on the apiBasePath set by the user",
      "required": true,
      "schema": {
        "type": "string",
        "example": "auth"
      }
    }
  },
  "body": {
    "schema": {
      "application/json": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "application/x-www-form-urlencoded": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string"
          }
        }
      }
    }
  },
  "responses": {
    "200": {
      "description": "Information about the token",
      "content": {
        "application/json": {
          "schema": [
            {
              "type": "object",
              "required": [
                "active"
              ],
              "properties": {
                "active": {
                  "type": "boolean",
                  "description": "Whether the token is active or not",
                  "example": true
                },
                "token_type": {
                  "type": "string",
                  "description": "The type of the token",
                  "example": "Bearer"
                },
                "token_use": {
                  "type": "string",
                  "description": "The use of the token",
                  "example": "access_token"
                },
                "sub": {
                  "type": "string",
                  "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                },
                "email": {
                  "type": "string",
                  "description": "The email of the user",
                  "example": "johndoe@gmail.com"
                },
                "email_verified": {
                  "type": "boolean",
                  "description": "Whether the email is verified",
                  "example": true
                },
                "emails": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                  }
                },
                "phoneNumber": {
                  "type": "string",
                  "description": "The phoneNumber of the user",
                  "example": "0036701234567"
                },
                "phoneNumber_verified": {
                  "type": "boolean",
                  "description": "Whether the phoneNumber is verified",
                  "example": true
                },
                "phoneNumbers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "0036701234567"
                  }
                },
                "roles": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "admin"
                  }
                },
                "permissions": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "user:create"
                  }
                }
              }
            },
            {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "GENERAL_ERROR"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          ]
        }
      }
    },
    "404": {
      "description": "error code 404",
      "content": {
        "text/plain": {
          "schema": {
            "type": "string",
            "enum": [
              "Not Found"
            ]
          }
        }
      }
    },
    "500": {
      "description": "error code 500",
      "content": {
        "text/plain": {
          "schema": {
            "type": "string",
            "enum": [
              "Internal Error"
            ]
          }
        }
      }
    }
  }
}
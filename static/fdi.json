{
  "openapi": "3.0.0",
  "servers": [],
  "info": {
    "description": "These are the APIs exposed by our backend SDK. To be consumed by the frontend only.\n`<tenantId>` in all the APIs are optional. Its default value is `public`\n",
    "version": "4.1.0",
    "title": "Frontend Driver Interface",
    "contact": {
      "email": "team@supertokens.io"
    }
  },
  "tags": [
    {
      "name": "Session Recipe"
    },
    {
      "name": "EmailPassword Recipe"
    },
    {
      "name": "ThirdParty Recipe"
    },
    {
      "name": "Passwordless Recipe"
    },
    {
      "name": "EmailVerification Recipe"
    },
    {
      "name": "MultiFactorAuth Recipe"
    },
    {
      "name": "TOTP Recipe"
    },
    {
      "name": "JWT Recipe"
    },
    {
      "name": "OpenId Recipe"
    },
    {
      "name": "WebAuthn Recipe"
    },
    {
      "name": "OAuth2Provider Recipe"
    }
  ],
  "paths": {
    "/{apiBasePath}/mfa/info": {
      "put": {
        "tags": [
          "MultiFactorAuth Recipe"
        ],
        "operationId": "getMFAInfo",
        "description": "Returns information about the auth factors of the current user and refreshes the related session claim\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "multifactorauth",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anti-csrf",
            "in": "header",
            "description": "This will only be here if enabled by the user.",
            "schema": {
              "type": "string",
              "example": "ZTRiOTBjNz...jI5MTZlODkxw"
            }
          }
        ],
        "security": [
          {
            "AccessTokenBearer": []
          },
          {
            "AccessTokenCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the auth factors of the current user and optionally the session with a refreshed MFA claim",
            "headers": {
              "Set-Cookie": {
                "description": "Sent in cookie-based sessions if the access token is updated",
                "schema": {
                  "type": "string",
                  "example": "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax"
                }
              },
              "st-access-token": {
                "description": "Sent in cookie-based sessions if the access token is updated",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "anti-csrf": {
                "description": "Sent if enabled by the user",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "front-token": {
                "description": "Sent if the access token is updated",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "Access-Control-Expose-Headers": {
                "schema": {
                  "type": "string",
                  "example": "anti-csrf, front-token, st-access-token"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "factors": {
                          "type": "object",
                          "properties": {
                            "alreadySetup": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "allowedToSetup": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "next": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "emails": {
                          "type": "object",
                          "properties": {
                            "emailpassword": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "otp-email": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "link-email": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "phoneNumbers": {
                          "type": "object",
                          "properties": {
                            "otp-phone": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "link-phone": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/totp/device/list": {
      "get": {
        "tags": [
          "TOTP Recipe"
        ],
        "operationId": "listTOTPdevices",
        "description": "List the TOTP devices of the current user\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "totp",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anti-csrf",
            "in": "header",
            "description": "This will only be here if enabled by the user.",
            "schema": {
              "type": "string",
              "example": "ZTRiOTBjNz...jI5MTZlODkxw"
            }
          }
        ],
        "security": [
          {
            "AccessTokenBearer": []
          },
          {
            "AccessTokenCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "The list of the TOTP devices of the session user",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "devices": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "example": "asdf123"
                              },
                              "period": {
                                "type": "number",
                                "example": 30
                              },
                              "skew": {
                                "type": "number",
                                "example": 30
                              },
                              "verified": {
                                "type": "boolean",
                                "example": false
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/totp/device": {
      "post": {
        "tags": [
          "TOTP Recipe"
        ],
        "operationId": "createTOTPDevice",
        "description": "Creates an unverified totp device\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "totp",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anti-csrf",
            "in": "header",
            "description": "This will only be here if enabled by the user.",
            "schema": {
              "type": "string",
              "example": "ZTRiOTBjNz...jI5MTZlODkxw"
            }
          }
        ],
        "security": [
          {
            "AccessTokenBearer": []
          },
          {
            "AccessTokenCookie": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deviceName": {
                    "type": "string",
                    "example": "asdf123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Information about the created (unverified) device. Based on the this,\nthe user can add the device to their TOTP app and verify it.\n",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "deviceName": {
                          "type": "string",
                          "example": "asfd123"
                        },
                        "qrCodeString": {
                          "type": "string",
                          "example": "otpauth://totp/Supertokens:alice@google.com?secret=JBSWY3DPEHPK3PXP&issuer=Supertokens"
                        },
                        "secret": {
                          "type": "string",
                          "example": "JBSWY3DPEHPK3PXP"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "DEVICE_ALREADY_EXISTS_ERROR"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "A claim validation error happened during factor setup",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "invalid claim"
                        },
                        "claimValidationErrors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "st-ev"
                              },
                              "reason": {
                                "type": "object",
                                "example": {
                                  "message": "wrong value",
                                  "expectedValue": true,
                                  "actualValue": false
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "invalid claim"
                        },
                        "claimValidationErrors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "st-mfa"
                              },
                              "reason": {
                                "type": "string",
                                "example": "Completed factors in the session does not satisfy the MFA requirements for auth"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/totp/device/remove": {
      "post": {
        "tags": [
          "TOTP Recipe"
        ],
        "operationId": "removeTOTPDevice",
        "description": "Removes a totp device\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "totp",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anti-csrf",
            "in": "header",
            "description": "This will only be here if enabled by the user.",
            "schema": {
              "type": "string",
              "example": "ZTRiOTBjNz...jI5MTZlODkxw"
            }
          }
        ],
        "security": [
          {
            "AccessTokenBearer": []
          },
          {
            "AccessTokenCookie": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deviceName": {
                    "type": "string",
                    "example": "asdf123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success report",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "didDeviceExist": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/totp/device/verify": {
      "post": {
        "tags": [
          "TOTP Recipe"
        ],
        "operationId": "verifyTOTPDevice",
        "description": "Checks that the TOTP sent in the body belongs to the totp device (specified by deviceName, belonging to the session user)\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "totp",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anti-csrf",
            "in": "header",
            "description": "This will only be here if enabled by the user.",
            "schema": {
              "type": "string",
              "example": "ZTRiOTBjNz...jI5MTZlODkxw"
            }
          }
        ],
        "security": [
          {
            "AccessTokenBearer": []
          },
          {
            "AccessTokenCookie": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "totp": {
                    "type": "string",
                    "example": "123456"
                  },
                  "deviceName": {
                    "type": "string",
                    "example": "asdf123asdf"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification result and optionally the session with a refreshed MFA claim",
            "headers": {
              "Set-Cookie": {
                "description": "Sent in cookie-based sessions if the access token payload is updated",
                "schema": {
                  "type": "string",
                  "example": "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax"
                }
              },
              "st-access-token": {
                "description": "Sent in cookie-based sessions if the access token payload is updated",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "anti-csrf": {
                "description": "Sent if enabled by the user",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "front-token": {
                "description": "Sent if the access token payload is updated",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "Access-Control-Expose-Headers": {
                "schema": {
                  "type": "string",
                  "example": "anti-csrf, front-token, st-access-token"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "UNKNOWN_DEVICE_ERROR"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "INVALID_TOTP_ERROR"
                          ]
                        },
                        "currentNumberOfFailedAttempts": {
                          "type": "number",
                          "example": 2
                        },
                        "maxNumberOfFailedAttempts": {
                          "type": "number",
                          "example": 5
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "LIMIT_REACHED_ERROR"
                          ]
                        },
                        "retryAfterMs": {
                          "type": "number",
                          "example": 30000
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "A claim validation error happened during factor setup",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "invalid claim"
                        },
                        "claimValidationErrors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "st-ev"
                              },
                              "reason": {
                                "type": "object",
                                "example": {
                                  "message": "wrong value",
                                  "expectedValue": true,
                                  "actualValue": false
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "invalid claim"
                        },
                        "claimValidationErrors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "st-mfa"
                              },
                              "reason": {
                                "type": "string",
                                "example": "Completed factors in the session does not satisfy the MFA requirements for auth"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/totp/verify": {
      "post": {
        "tags": [
          "TOTP Recipe"
        ],
        "operationId": "verifyTOTP",
        "description": "Checks that the TOTP sent in the body belongs to a verified totp device of the session user\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "totp",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anti-csrf",
            "in": "header",
            "description": "This will only be here if enabled by the user.",
            "schema": {
              "type": "string",
              "example": "ZTRiOTBjNz...jI5MTZlODkxw"
            }
          }
        ],
        "security": [
          {
            "AccessTokenBearer": []
          },
          {
            "AccessTokenCookie": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "totp": {
                    "type": "string",
                    "example": "123456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification result and optionally the session with a refreshed MFA claim",
            "headers": {
              "Set-Cookie": {
                "description": "Sent in cookie-based sessions if the access token payload is updated",
                "schema": {
                  "type": "string",
                  "example": "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax"
                }
              },
              "st-access-token": {
                "description": "Sent in cookie-based sessions if the access token payload is updated",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "anti-csrf": {
                "description": "Sent if enabled by the user",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "front-token": {
                "description": "Sent if the access token payload is updated",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "Access-Control-Expose-Headers": {
                "schema": {
                  "type": "string",
                  "example": "anti-csrf, front-token, st-access-token"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "INVALID_TOTP_ERROR"
                          ]
                        },
                        "currentNumberOfFailedAttempts": {
                          "type": "number",
                          "example": 2
                        },
                        "maxNumberOfFailedAttempts": {
                          "type": "number",
                          "example": 5
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "LIMIT_REACHED_ERROR"
                          ]
                        },
                        "retryAfterMs": {
                          "type": "number",
                          "example": 30000
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/signinup/code": {
      "post": {
        "tags": [
          "Passwordless Recipe"
        ],
        "operationId": "passwordlessSignInUpStart",
        "description": "Start sign in/up process with passwordless\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "passwordless",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "example": "johndoe@gmail.com"
                      },
                      "shouldTryLinkingWithSessionUser": {
                        "type": "boolean",
                        "example": false
                      }
                    },
                    "required": [
                      "email"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "phoneNumber": {
                        "type": "string",
                        "example": "0036701234567"
                      },
                      "shouldTryLinkingWithSessionUser": {
                        "type": "boolean",
                        "example": false
                      }
                    },
                    "required": [
                      "phoneNumber"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Started the passwordless sign in/up process.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "deviceId": {
                          "type": "string",
                          "description": "This should be saved on the starting device to enable the manual code entry flow.",
                          "example": "TU/52WOcktSv99zqaAZuWJG9BSoS0aRLfCbep8rFEwk="
                        },
                        "preAuthSessionId": {
                          "type": "string",
                          "description": "An identifier that used to identify the login attempt/device.",
                          "example": "kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs="
                        },
                        "flowType": {
                          "type": "string",
                          "enum": [
                            "MAGIC_LINK",
                            "USER_INPUT_CODE_AND_MAGIC_LINK",
                            "USER_INPUT_CODE"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "SIGN_IN_UP_NOT_ALLOWED"
                          ]
                        },
                        "reason": {
                          "type": "string",
                          "example": "Cannot sign in / up due to security reasons. Please contact support. (IS_SIGN_IN_ALLOWED_FALSE)"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "A claim validation error happened during factor setup",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "invalid claim"
                        },
                        "claimValidationErrors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "st-ev"
                              },
                              "reason": {
                                "type": "object",
                                "example": {
                                  "message": "wrong value",
                                  "expectedValue": true,
                                  "actualValue": false
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "invalid claim"
                        },
                        "claimValidationErrors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "st-mfa"
                              },
                              "reason": {
                                "type": "string",
                                "example": "Completed factors in the session does not satisfy the MFA requirements for auth"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/signinup/code/resend": {
      "post": {
        "tags": [
          "Passwordless Recipe"
        ],
        "operationId": "passwordlessSignInUpResend",
        "description": "Resend passwordless code\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "passwordless",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deviceId": {
                    "type": "string",
                    "description": "This should be saved on the starting device to enable the manual code entry flow.",
                    "example": "TU/52WOcktSv99zqaAZuWJG9BSoS0aRLfCbep8rFEwk="
                  },
                  "preAuthSessionId": {
                    "type": "string",
                    "description": "An identifier that used to identify the login attempt/device.",
                    "example": "kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs="
                  },
                  "shouldTryLinkingWithSessionUser": {
                    "type": "boolean",
                    "example": false
                  }
                },
                "required": [
                  "deviceId",
                  "preAuthSessionId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Started the passwordless sign in/up process.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK",
                            "RESTART_FLOW_ERROR"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/signinup/code/consume": {
      "post": {
        "tags": [
          "Passwordless Recipe"
        ],
        "operationId": "passwordlessSignInUpConsume",
        "description": "Finish sign in/up process with passwordless\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "passwordless",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "preAuthSessionId": {
                        "type": "string",
                        "description": "An identifier that used to identify the login attempt/device.",
                        "example": "kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs="
                      },
                      "shouldTryLinkingWithSessionUser": {
                        "type": "boolean",
                        "example": false
                      },
                      "linkCode": {
                        "type": "string",
                        "example": "b10lbT_SnDC4flA6Fn7pE5TtG5k5NfigLef4QMBeGA8"
                      }
                    },
                    "required": [
                      "preAuthSessionId",
                      "linkCode"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "preAuthSessionId": {
                        "type": "string",
                        "description": "An identifier that used to identify the login attempt/device.",
                        "example": "kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs="
                      },
                      "shouldTryLinkingWithSessionUser": {
                        "type": "boolean",
                        "example": false
                      },
                      "deviceId": {
                        "type": "string",
                        "description": "This should be saved on the starting device to enable the manual code entry flow.",
                        "example": "TU/52WOcktSv99zqaAZuWJG9BSoS0aRLfCbep8rFEwk="
                      },
                      "userInputCode": {
                        "type": "string",
                        "example": 432123
                      }
                    },
                    "required": [
                      "preAuthSessionId",
                      "deviceId",
                      "userInputCode"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Signin/up a user",
            "headers": {
              "Set-Cookie": {
                "description": "In cookie-based sessions",
                "schema": {
                  "type": "string",
                  "example": "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax"
                }
              },
              "st-access-token": {
                "description": "In header-based sessions",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "st-refresh-token": {
                "description": "In header-based sessions",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "anti-csrf": {
                "description": "If enabled by the user",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "front-token": {
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "Access-Control-Expose-Headers": {
                "schema": {
                  "type": "string",
                  "example": "anti-csrf, front-token, st-access-token, st-refresh-token"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "createdNewRecipeUser": {
                          "type": "boolean",
                          "example": true
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1638433545183
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "public"
                              }
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": 36201234123
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": "rq238mrq2389rvq123213"
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "recipeId": {
                                    "type": "string",
                                    "enum": [
                                      "emailpassword",
                                      "thirdparty",
                                      "passwordless"
                                    ]
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "public"
                                    }
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1638433545183
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": 36201234123
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": "rq238mrq2389rvq123213"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "INCORRECT_USER_INPUT_CODE_ERROR",
                            "EXPIRED_USER_INPUT_CODE_ERROR"
                          ]
                        },
                        "failedCodeInputAttemptCount": {
                          "type": "number",
                          "example": 2
                        },
                        "maximumCodeInputAttempts": {
                          "type": "number",
                          "example": 5
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "RESTART_FLOW_ERROR"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "SIGN_IN_UP_NOT_ALLOWED"
                          ]
                        },
                        "reason": {
                          "type": "string",
                          "example": "Cannot sign in / up due to security reasons. Please contact support. (IS_SIGN_IN_ALLOWED_FALSE)"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "A claim validation error happened during factor setup",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "invalid claim"
                        },
                        "claimValidationErrors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "st-ev"
                              },
                              "reason": {
                                "type": "object",
                                "example": {
                                  "message": "wrong value",
                                  "expectedValue": true,
                                  "actualValue": false
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "invalid claim"
                        },
                        "claimValidationErrors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "st-mfa"
                              },
                              "reason": {
                                "type": "string",
                                "example": "Completed factors in the session does not satisfy the MFA requirements for auth"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/signup/email/exists⠀⠀": {
      "get": {
        "deprecated": true,
        "tags": [
          "Passwordless Recipe"
        ],
        "operationId": "passwordlessEmailExistsDepr",
        "description": "Check if an email exists\nNote that there is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec.\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "passwordless",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "johndoe@gmail.com"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Checks if an email exists",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "exists": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/passwordless/email/exists": {
      "get": {
        "tags": [
          "Passwordless Recipe"
        ],
        "operationId": "passwordlessEmailExists",
        "description": "Check if an email exists\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "passwordless",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "johndoe@gmail.com"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Checks if an email exists",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "exists": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/signup/phoneNumber/exists": {
      "get": {
        "deprecated": true,
        "tags": [
          "Passwordless Recipe"
        ],
        "operationId": "passwordlessPhoneNumberExistsDepr",
        "description": "Check if a phone number exists\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "passwordless",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phoneNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0036701234567"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Checks if a phone number exists",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "exists": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/passwordless/phoneNumber/exists": {
      "get": {
        "tags": [
          "Passwordless Recipe"
        ],
        "operationId": "passwordlessPhoneNumberExists",
        "description": "Check if a phone number exists\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "passwordless",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phoneNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0036701234567"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Checks if a phone number exists",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "exists": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/signout": {
      "post": {
        "tags": [
          "Session Recipe"
        ],
        "operationId": "signout",
        "description": "Logout user\n",
        "security": [
          {
            "AccessTokenBearer": []
          },
          {
            "AccessTokenCookie": []
          }
        ],
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "session",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anti-csrf",
            "in": "header",
            "description": "This will only be here if enabled by the user.",
            "schema": {
              "type": "string",
              "example": "ZTRiOTBjNz...jI5MTZlODkxw"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logout user",
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "sAccessToken=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; SameSite=Lax sRefreshToken=; Path=/auth/session/refresh; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; SameSite=Lax"
                }
              },
              "st-access-token": {
                "description": "Set to an empty string to trigger token clearing in the client SDK",
                "schema": {
                  "type": "string",
                  "example": ""
                }
              },
              "st-refresh-token": {
                "description": "Set to an empty string to trigger token clearing in the client SDK",
                "schema": {
                  "type": "string",
                  "example": ""
                }
              },
              "front-token": {
                "schema": {
                  "type": "string",
                  "example": "remove"
                }
              },
              "Access-Control-Expose-Headers": {
                "schema": {
                  "type": "string",
                  "example": "front-token, st-access-token, st-refresh-token"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/session/refresh": {
      "post": {
        "tags": [
          "Session Recipe"
        ],
        "operationId": "refresh",
        "security": [
          {
            "RefreshTokenBearer": []
          },
          {
            "RefreshTokenCookie": []
          }
        ],
        "description": "Refresh the user session\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "session",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anti-csrf",
            "in": "header",
            "description": "This will only be here if enabled by the user.",
            "schema": {
              "type": "string",
              "example": "ZTRiOTBjNz...jI5MTZlODkxw"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Refresh users",
            "headers": {
              "Set-Cookie": {
                "description": "In cookie-based sessions",
                "schema": {
                  "type": "string",
                  "example": "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax"
                }
              },
              "st-access-token": {
                "description": "In header-based sessions",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "st-refresh-token": {
                "description": "In header-based sessions",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "anti-csrf": {
                "description": "If enabled by the user",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "front-token": {
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "Access-Control-Expose-Headers": {
                "schema": {
                  "type": "string",
                  "example": "anti-csrf, front-token, st-access-token, st-refresh-token"
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/signin": {
      "post": {
        "tags": [
          "EmailPassword Recipe"
        ],
        "operationId": "signIn",
        "description": "Signin a user with email ID and password\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "session",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "formFields"
                ],
                "properties": {
                  "formFields": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "enum": [
                            "email",
                            "password"
                          ]
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    "example": [
                      {
                        "id": "email",
                        "value": "johndoe@gmail.com"
                      },
                      {
                        "id": "password",
                        "value": "testPass123"
                      }
                    ]
                  },
                  "shouldTryLinkingWithSessionUser": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign in Response",
            "headers": {
              "Set-Cookie": {
                "description": "In cookie-based sessions",
                "schema": {
                  "type": "string",
                  "example": "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax"
                }
              },
              "st-access-token": {
                "description": "In header-based sessions",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "st-refresh-token": {
                "description": "In header-based sessions",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "anti-csrf": {
                "description": "If enabled by the user",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "front-token": {
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "Access-Control-Expose-Headers": {
                "schema": {
                  "type": "string",
                  "example": "anti-csrf, front-token, st-access-token, st-refresh-token"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1638433545183
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "public"
                              }
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": 36201234123
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": "rq238mrq2389rvq123213"
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "recipeId": {
                                    "type": "string",
                                    "enum": [
                                      "emailpassword",
                                      "thirdparty",
                                      "passwordless"
                                    ]
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "public"
                                    }
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1638433545183
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": 36201234123
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": "rq238mrq2389rvq123213"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "SIGN_IN_NOT_ALLOWED"
                          ]
                        },
                        "reason": {
                          "type": "string",
                          "example": "Cannot sign in due to security reasons. Please try resetting your password, use a different login method or contact support. (ERR_CODE_008)"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "FIELD_ERROR"
                          ]
                        },
                        "formFields": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "email"
                              },
                              "error": {
                                "type": "string",
                                "example": "Error Message"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "WRONG_CREDENTIALS_ERROR"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "A claim validation error happened during factor setup",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "invalid claim"
                        },
                        "claimValidationErrors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "st-ev"
                              },
                              "reason": {
                                "type": "object",
                                "example": {
                                  "message": "wrong value",
                                  "expectedValue": true,
                                  "actualValue": false
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "invalid claim"
                        },
                        "claimValidationErrors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "st-mfa"
                              },
                              "reason": {
                                "type": "string",
                                "example": "Completed factors in the session does not satisfy the MFA requirements for auth"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/signup": {
      "post": {
        "tags": [
          "EmailPassword Recipe"
        ],
        "operationId": "signUp",
        "description": "Signup a user with email ID and password\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "emailpassword",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "formFields"
                ],
                "properties": {
                  "formFields": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "enum": [
                            "email",
                            "password"
                          ]
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    "example": [
                      {
                        "id": "email",
                        "value": "johndoe@gmail.com"
                      },
                      {
                        "id": "password",
                        "value": "testPass123"
                      }
                    ]
                  },
                  "shouldTryLinkingWithSessionUser": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign up Response",
            "headers": {
              "Set-Cookie": {
                "description": "In cookie-based sessions",
                "schema": {
                  "type": "string",
                  "example": "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax"
                }
              },
              "st-access-token": {
                "description": "In header-based sessions",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "st-refresh-token": {
                "description": "In header-based sessions",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "anti-csrf": {
                "description": "If enabled by the user",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "front-token": {
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "Access-Control-Expose-Headers": {
                "schema": {
                  "type": "string",
                  "example": "anti-csrf, front-token, st-access-token, st-refresh-token"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1638433545183
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "public"
                              }
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": 36201234123
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": "rq238mrq2389rvq123213"
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "recipeId": {
                                    "type": "string",
                                    "enum": [
                                      "emailpassword",
                                      "thirdparty",
                                      "passwordless"
                                    ]
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "public"
                                    }
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1638433545183
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": 36201234123
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": "rq238mrq2389rvq123213"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "SIGN_UP_NOT_ALLOWED"
                          ]
                        },
                        "reason": {
                          "type": "string",
                          "example": "Cannot sign up due to security reasons. Please try resetting your password, use a different login method or contact support. (ERR_CODE_007)"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "FIELD_ERROR"
                          ]
                        },
                        "formFields": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "email"
                              },
                              "error": {
                                "type": "string",
                                "example": "Error Message"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "A claim validation error happened during factor setup",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "invalid claim"
                        },
                        "claimValidationErrors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "st-ev"
                              },
                              "reason": {
                                "type": "object",
                                "example": {
                                  "message": "wrong value",
                                  "expectedValue": true,
                                  "actualValue": false
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "invalid claim"
                        },
                        "claimValidationErrors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "st-mfa"
                              },
                              "reason": {
                                "type": "string",
                                "example": "Completed factors in the session does not satisfy the MFA requirements for auth"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/signup/email/exists": {
      "get": {
        "deprecated": true,
        "tags": [
          "EmailPassword Recipe"
        ],
        "operationId": "emailExistsDepr",
        "description": "Check if an email exists\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "emailpassword",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "johndoe@gmail.com"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Checks if an email exists",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "exists": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/emailpassword/email/exists": {
      "get": {
        "tags": [
          "EmailPassword Recipe"
        ],
        "operationId": "emailExists",
        "description": "Check if an email exists\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "emailpassword",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "johndoe@gmail.com"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Checks if an email exists",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "exists": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/user/password/reset/token": {
      "post": {
        "tags": [
          "EmailPassword Recipe"
        ],
        "operationId": "passwordResetToken",
        "description": "Generate a new reset password token for this user\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "emailpassword",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "formFields": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "enum": [
                            "email",
                            "password"
                          ]
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    "example": [
                      {
                        "id": "email",
                        "value": "johndoe@gmail.com"
                      },
                      {
                        "id": "password",
                        "value": "testPass123"
                      }
                    ]
                  }
                },
                "example": {
                  "formFields": [
                    {
                      "id": "email",
                      "value": "test@email.com"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Generate a new reset password token for this user",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "PASSWORD_RESET_NOT_ALLOWED"
                          ]
                        },
                        "reason": {
                          "type": "string",
                          "example": "Token generation was not done because of account take over risk. Please contact support. (HAS_OTHER_EMAIL_OR_PHONE)"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "FIELD_ERROR"
                          ]
                        },
                        "formFields": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "email"
                              },
                              "error": {
                                "type": "string",
                                "example": "Error Message"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/user/password/reset": {
      "post": {
        "tags": [
          "EmailPassword Recipe"
        ],
        "operationId": "passwordReset",
        "description": "Reset a password using password reset token\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "emailpassword",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "method": {
                    "type": "string",
                    "example": "token"
                  },
                  "formfields": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "enum": [
                            "email",
                            "password"
                          ]
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    "example": [
                      {
                        "id": "email",
                        "value": "johndoe@gmail.com"
                      },
                      {
                        "id": "password",
                        "value": "testPass123"
                      }
                    ]
                  },
                  "token": {
                    "type": "string",
                    "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                  }
                },
                "example": {
                  "method": "token",
                  "formFields": [
                    {
                      "id": "password",
                      "value": "newPass123"
                    }
                  ],
                  "token": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset a password using password reset token",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "RESET_PASSWORD_INVALID_TOKEN_ERROR"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "FIELD_ERROR"
                          ]
                        },
                        "formFields": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "email"
                              },
                              "error": {
                                "type": "string",
                                "example": "Error Message"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/signinup": {
      "post": {
        "tags": [
          "ThirdParty Recipe"
        ],
        "operationId": "signInUp",
        "description": "Signin/up a user\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "thirdparty",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "thirdPartyId",
                      "redirectURIInfo"
                    ],
                    "properties": {
                      "thirdPartyId": {
                        "type": "string",
                        "example": "google"
                      },
                      "clientType": {
                        "type": "string",
                        "example": "web"
                      },
                      "redirectURIInfo": {
                        "type": "object",
                        "required": [
                          "redirectURIOnProviderDashboard",
                          "redirectURIQueryParams"
                        ],
                        "properties": {
                          "redirectURIOnProviderDashboard": {
                            "type": "string",
                            "example": "https://yourdomain.com/callback"
                          },
                          "redirectURIQueryParams": {
                            "type": "object",
                            "example": {
                              "code": "neqmpdsfuqe141m5lk437867masdf",
                              "state": "ljayfgqewertbh13245njw0"
                            }
                          },
                          "pkceCodeVerifier": {
                            "type": "string",
                            "example": "abcd1234"
                          }
                        }
                      },
                      "shouldTryLinkingWithSessionUser": {
                        "type": "boolean",
                        "example": false
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "thirdPartyId",
                      "oAuthTokens"
                    ],
                    "properties": {
                      "thirdPartyId": {
                        "type": "string",
                        "example": "google"
                      },
                      "clientType": {
                        "type": "string",
                        "example": "web"
                      },
                      "oAuthTokens": {
                        "type": "object",
                        "properties": {
                          "access_token": {
                            "type": "string",
                            "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                          },
                          "id_token": {
                            "type": "string",
                            "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                          }
                        }
                      },
                      "shouldTryLinkingWithSessionUser": {
                        "type": "boolean",
                        "example": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Signin/up a user",
            "headers": {
              "Set-Cookie": {
                "description": "In cookie-based sessions",
                "schema": {
                  "type": "string",
                  "example": "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax"
                }
              },
              "st-access-token": {
                "description": "In header-based sessions",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "st-refresh-token": {
                "description": "In header-based sessions",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "anti-csrf": {
                "description": "If enabled by the user",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "front-token": {
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "Access-Control-Expose-Headers": {
                "schema": {
                  "type": "string",
                  "example": "anti-csrf, front-token, st-access-token, st-refresh-token"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1638433545183
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "public"
                              }
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": 36201234123
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": "rq238mrq2389rvq123213"
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "recipeId": {
                                    "type": "string",
                                    "enum": [
                                      "emailpassword",
                                      "thirdparty",
                                      "passwordless"
                                    ]
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "public"
                                    }
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1638433545183
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": 36201234123
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": "rq238mrq2389rvq123213"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "createdNewRecipeUser": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "enum": [
                                "NO_EMAIL_GIVEN_BY_PROVIDER"
                              ]
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "enum": [
                                "SIGN_IN_UP_NOT_ALLOWED"
                              ]
                            },
                            "reason": {
                              "type": "string",
                              "example": "Cannot sign in / up due to security reasons. Please contact support. (IS_SIGN_IN_ALLOWED_FALSE)"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "A claim validation error happened during factor setup",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "invalid claim"
                        },
                        "claimValidationErrors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "st-ev"
                              },
                              "reason": {
                                "type": "object",
                                "example": {
                                  "message": "wrong value",
                                  "expectedValue": true,
                                  "actualValue": false
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "invalid claim"
                        },
                        "claimValidationErrors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "st-mfa"
                              },
                              "reason": {
                                "type": "string",
                                "example": "Completed factors in the session does not satisfy the MFA requirements for auth"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/authorisationurl": {
      "get": {
        "tags": [
          "ThirdParty Recipe"
        ],
        "operationId": "authorisationUrl",
        "description": "Get the thirdparty provider's authorisation URL to which the user should be redirected to.\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "thirdparty",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "thirdPartyId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "google"
            }
          },
          {
            "in": "query",
            "name": "redirectURIOnProviderDashboard",
            "required": true,
            "schema": {
              "type": "string",
              "example": "https://yourdomain.com/callback"
            }
          },
          {
            "in": "query",
            "name": "clientType",
            "required": false,
            "schema": {
              "type": "string",
              "example": "web"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the OAuth authorisation URL",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "status",
                        "url"
                      ],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "urlWithQueryParams": {
                          "type": "string",
                          "example": "https://providerdomain.com/authorize?client_id=..&scope=..&access_type=.."
                        },
                        "pkceCodeVerifier": {
                          "type": "string",
                          "example": "abcd1234"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/loginmethods": {
      "get": {
        "tags": [
          "Multitenancy Recipe"
        ],
        "operationId": "loginmethods",
        "description": "Get enabled login methods: Returns recipes with their enabled setting and recipe specific configuration.\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "multitenancy",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "clientType",
            "required": false,
            "schema": {
              "type": "string",
              "example": "web"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get enabled login methods",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "status",
                        "recipes"
                      ],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "recipes": {
                          "type": "object",
                          "required": [
                            "emailPassword",
                            "thirdParty",
                            "passwordless",
                            "firstFactors"
                          ],
                          "properties": {
                            "emailPassword": {
                              "type": "object",
                              "required": [
                                "enabled"
                              ],
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "example": true
                                }
                              }
                            },
                            "thirdParty": {
                              "type": "object",
                              "required": [
                                "enabled",
                                "providers"
                              ],
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "example": true
                                },
                                "providers": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "id"
                                    ],
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "name": {
                                        "type": "string",
                                        "example": "Google"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "passwordless": {
                              "type": "object",
                              "required": [
                                "enabled"
                              ],
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "example": true
                                }
                              }
                            },
                            "firstFactors": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/callback/apple": {
      "post": {
        "tags": [
          "ThirdParty Recipe"
        ],
        "operationId": "thirdPartyCallbackApple",
        "description": "Handles sign in with the apple.\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "The Authorization code which will be exchanged for an access token"
                  },
                  "state": {
                    "type": "string",
                    "description": "A unique string used to mitigate CSRF attacks"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "303": {
            "description": "Redirects the user to the client's app."
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/user/email/verify/token": {
      "post": {
        "tags": [
          "EmailVerification Recipe"
        ],
        "operationId": "verifyEmailToken",
        "description": "Send email verification email\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "emailverification",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anti-csrf",
            "in": "header",
            "description": "This will only be here if enabled by the user.",
            "schema": {
              "type": "string",
              "example": "ZTRiOTBjNz...jI5MTZlODkxw"
            }
          }
        ],
        "security": [
          {
            "AccessTokenBearer": []
          },
          {
            "AccessTokenCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Send email verification email",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK",
                            "EMAIL_ALREADY_VERIFIED_ERROR"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/user/email/verify": {
      "post": {
        "tags": [
          "EmailVerification Recipe"
        ],
        "operationId": "verifyEmail",
        "description": "Verify an email\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "emailverification",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "method": {
                    "type": "string",
                    "example": "token"
                  },
                  "token": {
                    "type": "string",
                    "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verify an email",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK",
                            "EMAIL_VERIFICATION_INVALID_TOKEN_ERROR"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/user/email/verify": {
      "get": {
        "tags": [
          "EmailVerification Recipe"
        ],
        "operationId": "getVerifyEmail",
        "description": "Checks if an email is verified and adds this information into the access token payload as well\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "emailverification",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anti-csrf",
            "in": "header",
            "description": "This will only be here if enabled by the user.",
            "schema": {
              "type": "string",
              "example": "ZTRiOTBjNz...jI5MTZlODkxw"
            }
          }
        ],
        "security": [
          {
            "AccessTokenBearer": []
          },
          {
            "AccessTokenCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Checks if an email is verified and adds this information into the access token payload as well",
            "headers": {
              "Set-Cookie": {
                "description": "Sent in cookie-based sessions if the access token payload is updated",
                "schema": {
                  "type": "string",
                  "example": "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax"
                }
              },
              "st-access-token": {
                "description": "Sent in cookie-based sessions if the access token payload is updated",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "anti-csrf": {
                "description": "Sent if enabled by the user",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "front-token": {
                "description": "Sent if the access token payload is updated",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "Access-Control-Expose-Headers": {
                "schema": {
                  "type": "string",
                  "example": "anti-csrf, front-token, st-access-token"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "isVerified": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/jwt/jwks.json": {
      "get": {
        "tags": [
          "JWT Recipe"
        ],
        "operationId": "getJWKS",
        "description": "Get all JSON web keys for JWT verification\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve JWKs for JWT verification",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "keys": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "description": "A JWK that can be used to verify a JWT",
                            "properties": {
                              "alg": {
                                "type": "string",
                                "description": "The algorithm to use when creating the JWT.",
                                "enum": [
                                  "RS256"
                                ]
                              },
                              "kty": {
                                "type": "string",
                                "example": "RSA"
                              },
                              "use": {
                                "type": "string",
                                "example": "sig"
                              },
                              "kid": {
                                "type": "string",
                                "description": "Unique identifier for the JWK"
                              },
                              "n": {
                                "type": "string",
                                "description": "Modulus for the key"
                              },
                              "e": {
                                "type": "string",
                                "description": "Exponent for the key"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Bad request"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/.well-known/openid-configuration": {
      "get": {
        "tags": [
          "OpenId Recipe"
        ],
        "operationId": "getOpenIdDiscoveryConfiguration",
        "description": "Get OpenID discovery configuration\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve OpenID configuration",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "issuer": {
                          "type": "string",
                          "description": "URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier (https://openid.net/specs/openid-connect-discovery-1_0.html section 3)",
                          "example": "https://api.example.com/auth"
                        },
                        "jwks_uri": {
                          "type": "string",
                          "description": "URL for fetching a list JsonWebKey, used for JWT signature verification. Refer to /jwt/jwks.json API in the JWT recipe for JWK details",
                          "example": "https://api.example.com/auth/jwt/jwks.json"
                        },
                        "authorization_endpoint": {
                          "type": "string",
                          "description": "URL of the authorization endpoint",
                          "example": "https://api.example.com/auth/oauth/authorize"
                        },
                        "token_endpoint": {
                          "type": "string",
                          "description": "URL of the token endpoint",
                          "example": "https://api.example.com/auth/oauth/token"
                        },
                        "userinfo_endpoint": {
                          "type": "string",
                          "description": "URL of the userinfo endpoint",
                          "example": "https://api.example.com/auth/oauth/userinfo"
                        },
                        "revocation_endpoint": {
                          "type": "string",
                          "description": "URL of the token revocation endpoint",
                          "example": "https://api.example.com/auth/oauth/revoke"
                        },
                        "token_introspection_endpoint": {
                          "type": "string",
                          "description": "URL of the token introspection endpoint",
                          "example": "https://api.example.com/auth/oauth/introspect"
                        },
                        "end_session_endpoint": {
                          "type": "string",
                          "description": "URL of the end session endpoint",
                          "example": "https://api.example.com/auth/oauth/end_session"
                        },
                        "subject_types_supported": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "public"
                            ]
                          }
                        },
                        "id_token_signing_alg_values_supported": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "RS256"
                            ]
                          }
                        },
                        "response_types_supported": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "code",
                              "id_token",
                              "id_token token"
                            ]
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Bad request"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/oauth/login": {
      "get": {
        "tags": [
          "OAuth2Provider Recipe"
        ],
        "operationId": "oauthLoginGET",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "in": "query",
            "name": "loginChallenge",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Continues the OAuth2 login flow after the login page\n",
        "responses": {
          "200": {
            "description": "The next url in the login flow",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "frontendRedirectTo": {
                          "type": "string",
                          "description": "The URL to redirect the user to",
                          "example": "https://client.com/callback?code=asdf1234567890&status=asdf1234"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400 for OAuth2 errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unsupported grant type: password"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/oauth/auth": {
      "get": {
        "tags": [
          "OAuth2Provider Recipe"
        ],
        "operationId": "oauthAuthGET",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          }
        ],
        "description": "Starts the OAuth2 login flow - for a detailed description of all input parameters please see the OAuth2 and OpenID Connect Core specs\n",
        "responses": {
          "200": {
            "description": "A general error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "GENERAL_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "302": {
            "description": "Redirects the user to the login page or back to the client app",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "example": "https://auth.example.com/auth/?loginChallenge=1234567890"
                }
              }
            }
          },
          "400": {
            "description": "error code 400 for OAuth2 errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unsupported grant type: password"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/oauth/token": {
      "post": {
        "tags": [
          "OAuth2Provider Recipe"
        ],
        "operationId": "oauthTokenPOST",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          }
        ],
        "description": "Exchanges an OAuth2 grant (e.g.: authorization code) for an access token (and optionally a refresh/id token) - for a detailed description of all input parameters please see the OAuth2 and OpenID Connect Core specs\n",
        "responses": {
          "200": {
            "description": "Issued tokens",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "expires_in",
                        "token_type",
                        "scope"
                      ],
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "description": "The access token issued by the authorization server."
                        },
                        "expires_in": {
                          "type": "number",
                          "description": "The lifetime in seconds of the access token (integer). For example, the value \"3600\" denotes that the access token will expire in one hour from the time the response was generated."
                        },
                        "id_token": {
                          "type": "string",
                          "description": "To retrieve a refresh token request the id_token scope."
                        },
                        "refresh_token": {
                          "type": "string",
                          "description": "The refresh token, which can be used to obtain new access tokens. To retrieve it add the scope \"offline\" to your access token request."
                        },
                        "scope": {
                          "type": "string",
                          "description": "The scope of the access token"
                        },
                        "token_type": {
                          "type": "string",
                          "description": "The type of the token issued"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400 for OAuth2 errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unsupported grant type: password"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/oauth/userinfo": {
      "get": {
        "tags": [
          "OAuth2Provider Recipe"
        ],
        "operationId": "oauthUserInfoGET",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          }
        ],
        "security": [
          {
            "OAuth2AccessTokenBearer": []
          }
        ],
        "description": "Retrieves user information based on the access token passed in the authorization header\n",
        "responses": {
          "200": {
            "description": "Retrieved user information",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "sub"
                      ],
                      "properties": {
                        "sub": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                        },
                        "email": {
                          "type": "string",
                          "description": "The email of the user",
                          "example": "johndoe@gmail.com"
                        },
                        "email_verified": {
                          "type": "boolean",
                          "description": "Whether the email is verified",
                          "example": true
                        },
                        "emails": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "johndoe@gmail.com"
                          }
                        },
                        "phoneNumber": {
                          "type": "string",
                          "description": "The phoneNumber of the user",
                          "example": "0036701234567"
                        },
                        "phoneNumber_verified": {
                          "type": "boolean",
                          "description": "Whether the phoneNumber is verified",
                          "example": true
                        },
                        "phoneNumbers": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "0036701234567"
                          }
                        },
                        "roles": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "admin"
                          }
                        },
                        "permissions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "user:create"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The access token is expired, revoked or malformed",
            "headers": {
              "WWW-Authenticate": {
                "schema": {
                  "type": "string",
                  "example": "Bearer error=\"invalid_token\""
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired OAuth2 access token"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/oauth/revoke": {
      "post": {
        "tags": [
          "OAuth2Provider Recipe"
        ],
        "operationId": "oauthRevokePOST",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          }
        ],
        "description": "Revokes an access/refresh token - the client id and secret can also be provided in an authorization header using the Basic scheme\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "client_id": {
                    "type": "string",
                    "example": "st-cl-test-client"
                  },
                  "client_secret": {
                    "type": "string",
                    "example": "superSecret"
                  }
                }
              }
            },
            "x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "client_id": {
                    "type": "string",
                    "example": "st-cl-test-client"
                  },
                  "client_secret": {
                    "type": "string",
                    "example": "superSecret"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Revoked the access/refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "status"
                      ],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400 for OAuth2 errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unsupported grant type: password"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/oauth/introspect": {
      "post": {
        "tags": [
          "OAuth2Provider Recipe"
        ],
        "operationId": "oauthIntrospectPOST",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          }
        ],
        "description": "Introspects an access/refresh token\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string"
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Information about the token",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "active"
                      ],
                      "properties": {
                        "active": {
                          "type": "boolean",
                          "description": "Whether the token is active or not",
                          "example": true
                        },
                        "token_type": {
                          "type": "string",
                          "description": "The type of the token",
                          "example": "Bearer"
                        },
                        "token_use": {
                          "type": "string",
                          "description": "The use of the token",
                          "example": "access_token"
                        },
                        "sub": {
                          "type": "string",
                          "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                        },
                        "email": {
                          "type": "string",
                          "description": "The email of the user",
                          "example": "johndoe@gmail.com"
                        },
                        "email_verified": {
                          "type": "boolean",
                          "description": "Whether the email is verified",
                          "example": true
                        },
                        "emails": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "johndoe@gmail.com"
                          }
                        },
                        "phoneNumber": {
                          "type": "string",
                          "description": "The phoneNumber of the user",
                          "example": "0036701234567"
                        },
                        "phoneNumber_verified": {
                          "type": "boolean",
                          "description": "Whether the phoneNumber is verified",
                          "example": true
                        },
                        "phoneNumbers": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "0036701234567"
                          }
                        },
                        "roles": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "admin"
                          }
                        },
                        "permissions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "user:create"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/oauth/end_session": {
      "post": {
        "tags": [
          "OAuth2Provider Recipe"
        ],
        "operationId": "oauthEndSessionPOST",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id_token_hint": {
                    "type": "string"
                  },
                  "client_id": {
                    "type": "string",
                    "example": "st-cl-example-client"
                  },
                  "post_logout_redirect_uri": {
                    "type": "string",
                    "example": "https://client.example.com/logoutCallback"
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "id_token_hint": {
                    "type": "string"
                  },
                  "client_id": {
                    "type": "string",
                    "example": "st-cl-example-client"
                  },
                  "post_logout_redirect_uri": {
                    "type": "string",
                    "example": "https://client.example.com/logoutCallback"
                  }
                }
              }
            }
          }
        },
        "description": "Redirects the user to a page where they can log out and revoke the oauth tokens - for a detailed description of input parameters please see the user initiated logout spec\n",
        "responses": {
          "200": {
            "description": "A general error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "GENERAL_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "302": {
            "description": "Redirects the user to the logout page or back to the client app",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "example": "https://auth.example.com/auth/oauth/logout?logoutChallenge=1234567890"
                }
              }
            }
          },
          "400": {
            "description": "error code 400 for OAuth2 errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unsupported grant type: password"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "OAuth2Provider Recipe"
        ],
        "operationId": "oauthEndSessionGET",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "in": "query",
            "name": "id_token_hint",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "client_id",
            "schema": {
              "type": "string",
              "example": "st-cl-example-client"
            }
          },
          {
            "in": "query",
            "name": "post_logout_redirect_uri",
            "schema": {
              "type": "string",
              "example": "https://client.example.com/logoutCallback"
            }
          }
        ],
        "description": "Redirects the user to a page where they can log out and revoke the oauth tokens\n",
        "responses": {
          "200": {
            "description": "A general error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "GENERAL_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "302": {
            "description": "Redirects the user to the logout page or back to the client app",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "example": "https://auth.example.com/auth/oauth/logout?logoutChallenge=1234567890"
                }
              }
            }
          },
          "400": {
            "description": "error code 400 for OAuth2 errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unsupported grant type: password"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/oauth/logininfo": {
      "get": {
        "tags": [
          "OAuth2Provider Recipe"
        ],
        "operationId": "oauthLoginInfoGET",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "in": "query",
            "name": "loginChallenge",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Retrieves information about the OAuth2 login\n",
        "responses": {
          "200": {
            "description": "Information about the current login flow",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "status",
                        "info"
                      ],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "info": {
                          "type": "object",
                          "description": "Information about the current login flow",
                          "required": [
                            "clientId"
                          ],
                          "properties": {
                            "clientId": {
                              "type": "string",
                              "description": "The ID of the client."
                            },
                            "clientName": {
                              "type": "string",
                              "description": "The name of the client."
                            },
                            "tosUri": {
                              "type": "string",
                              "description": "The URI of the client's terms of service."
                            },
                            "policyUri": {
                              "type": "string",
                              "description": "The URI of the client's privacy policy."
                            },
                            "logoUri": {
                              "type": "string",
                              "description": "The URI of the client's logo."
                            },
                            "clientUri": {
                              "type": "string",
                              "description": "The URI of the client we can link to on the login page"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400 for OAuth2 errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unsupported grant type: password"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/oauth/logout": {
      "post": {
        "tags": [
          "OAuth2Provider Recipe"
        ],
        "operationId": "oauthLogoutPOST",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          }
        ],
        "description": "Logs out the user and revokes the access/refresh tokens based on the id_token_hint passed to the end_session endpoint\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "logoutChallenge"
                ],
                "properties": {
                  "logoutChallenge": {
                    "type": "string"
                  }
                }
              }
            },
            "x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "logoutChallenge"
                ],
                "properties": {
                  "logoutChallenge": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepts the logout request specified by the challenge and gets where the user should be redirected to",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "frontendRedirectTo": {
                          "type": "string",
                          "description": "The URL to redirect the user to",
                          "example": "https://auth.example.com/auth/oauth/logout?logoutChallenge=1234567890"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "error code 400 for OAuth2 errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unsupported grant type: password"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/example": {
      "get": {
        "tags": [
          "App API"
        ],
        "operationId": "exampleAppAPI",
        "description": "API endpoint in your application, checked with `verifySession`\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The session passed verification and went through the application code"
          },
          "401": {
            "description": "The session doesn't exists or if it needs to be refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "unauthorised or try refresh token",
                      "example": "try refresh token"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The session exists, but didn't pass a claim validator",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "invalid claim"
                    },
                    "claimValidationErrors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "st-ev"
                          },
                          "reason": {
                            "type": "object",
                            "example": {
                              "message": "value does not exist",
                              "expectedValue": "val",
                              "actualValue": "claimVal"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/webauthn/register/options": {
      "post": {
        "tags": [
          "WebAuthn Recipe"
        ],
        "operationId": "webauthnRegisterOptions",
        "description": "Get WebAuthn registration options for a user\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "webauthn",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "email"
                    ],
                    "properties": {
                      "email": {
                        "type": "string",
                        "example": "johndoe@gmail.com"
                      },
                      "displayName": {
                        "type": "string",
                        "example": "John Doe"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "recoverAccountToken"
                    ],
                    "properties": {
                      "recoverAccountToken": {
                        "type": "string",
                        "example": "abc123..."
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "WebAuthn registration options",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "webauthnGeneratedOptionsId": {
                          "type": "string",
                          "example": "opt_123..."
                        },
                        "createdAt": {
                          "type": "string",
                          "example": "2024-03-20T10:00:00Z"
                        },
                        "expiresAt": {
                          "type": "string",
                          "example": "2024-03-20T10:05:00Z"
                        },
                        "rp": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "example.com"
                            },
                            "name": {
                              "type": "string",
                              "example": "Example Site"
                            }
                          }
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "user_123..."
                            },
                            "name": {
                              "type": "string",
                              "example": "john@example.com"
                            },
                            "displayName": {
                              "type": "string",
                              "example": "John Doe"
                            }
                          }
                        },
                        "challenge": {
                          "type": "string",
                          "example": "base64challenge..."
                        },
                        "timeout": {
                          "type": "number",
                          "example": 300000
                        },
                        "excludeCredentials": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "public-key"
                                ]
                              },
                              "transports": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "ble",
                                    "hybrid",
                                    "internal",
                                    "nfc",
                                    "usb"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "attestation": {
                          "type": "string",
                          "enum": [
                            "none",
                            "indirect",
                            "direct",
                            "enterprise"
                          ]
                        },
                        "pubKeyCredParams": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "alg": {
                                "type": "number",
                                "example": -7
                              },
                              "type": {
                                "type": "string",
                                "example": "public-key"
                              }
                            }
                          }
                        },
                        "authenticatorSelection": {
                          "type": "object",
                          "properties": {
                            "requireResidentKey": {
                              "type": "boolean"
                            },
                            "residentKey": {
                              "type": "string",
                              "enum": [
                                "required",
                                "preferred",
                                "discouraged"
                              ]
                            },
                            "userVerification": {
                              "type": "string",
                              "enum": [
                                "required",
                                "preferred",
                                "discouraged"
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "INVALID_OPTIONS_ERROR",
                            "RECOVER_ACCOUNT_TOKEN_INVALID_ERROR"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "INVALID_EMAIL_ERROR"
                          ]
                        },
                        "err": {
                          "type": "string",
                          "example": "Invalid email"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/webauthn/signin/options": {
      "post": {
        "tags": [
          "WebAuthn Recipe"
        ],
        "operationId": "webauthnSignInOptions",
        "description": "Get WebAuthn sign in options\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "webauthn",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "WebAuthn sign in options",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "webauthnGeneratedOptionsId": {
                          "type": "string",
                          "example": "opt_123..."
                        },
                        "createdAt": {
                          "type": "string",
                          "example": "2024-03-20T10:00:00Z"
                        },
                        "expiresAt": {
                          "type": "string",
                          "example": "2024-03-20T10:05:00Z"
                        },
                        "rpId": {
                          "type": "string",
                          "example": "example.com"
                        },
                        "challenge": {
                          "type": "string",
                          "example": "base64challenge..."
                        },
                        "timeout": {
                          "type": "number",
                          "example": 300000
                        },
                        "userVerification": {
                          "type": "string",
                          "enum": [
                            "required",
                            "preferred",
                            "discouraged"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "INVALID_OPTIONS_ERROR"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/webauthn/signup": {
      "post": {
        "tags": [
          "WebAuthn Recipe"
        ],
        "operationId": "webauthnSignUp",
        "description": "Sign up a user with WebAuthn\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "webauthn",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "webauthnGeneratedOptionsId",
                  "credential"
                ],
                "properties": {
                  "webauthnGeneratedOptionsId": {
                    "type": "string",
                    "example": "opt_123..."
                  },
                  "credential": {
                    "type": "object",
                    "required": [
                      "id",
                      "rawId",
                      "response",
                      "type"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "cred_123..."
                      },
                      "rawId": {
                        "type": "string",
                        "example": "base64rawid..."
                      },
                      "authenticatorAttachment": {
                        "type": "string",
                        "enum": [
                          "platform",
                          "cross-platform"
                        ]
                      },
                      "clientExtensionResults": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "response": {
                        "type": "object",
                        "required": [
                          "clientDataJSON",
                          "attestationObject"
                        ],
                        "properties": {
                          "clientDataJSON": {
                            "type": "string",
                            "example": "base64clientdata..."
                          },
                          "attestationObject": {
                            "type": "string",
                            "example": "base64attestation..."
                          },
                          "authenticatorData": {
                            "type": "string",
                            "example": "base64authenticatordata..."
                          },
                          "transports": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "usb",
                                "nfc",
                                "ble",
                                "internal",
                                "smart-card",
                                "cable",
                                "hybrid"
                              ]
                            }
                          },
                          "publicKey": {
                            "type": "string",
                            "example": "base64publickey..."
                          },
                          "publicKeyAlgorithm": {
                            "type": "number",
                            "example": -7
                          }
                        }
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "public-key"
                        ]
                      }
                    }
                  },
                  "shouldTryLinkingWithSessionUser": {
                    "type": "boolean",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign up response",
            "headers": {
              "Set-Cookie": {
                "description": "In cookie-based sessions",
                "schema": {
                  "type": "string",
                  "example": "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax"
                }
              },
              "st-access-token": {
                "description": "In header-based sessions",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "st-refresh-token": {
                "description": "In header-based sessions",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "anti-csrf": {
                "description": "If enabled by the user",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "front-token": {
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "Access-Control-Expose-Headers": {
                "schema": {
                  "type": "string",
                  "example": "anti-csrf, front-token, st-access-token, st-refresh-token"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1638433545183
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "public"
                              }
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": 36201234123
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": "rq238mrq2389rvq123213"
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "recipeId": {
                                    "type": "string",
                                    "enum": [
                                      "emailpassword",
                                      "thirdparty",
                                      "passwordless"
                                    ]
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "public"
                                    }
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1638433545183
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": 36201234123
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": "rq238mrq2389rvq123213"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "INVALID_CREDENTIALS_ERROR",
                            "EMAIL_ALREADY_EXISTS_ERROR"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/webauthn/signin": {
      "post": {
        "tags": [
          "WebAuthn Recipe"
        ],
        "operationId": "webauthnSignIn",
        "description": "Sign in a user with WebAuthn\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "webauthn",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "webauthnGeneratedOptionsId",
                  "credential"
                ],
                "properties": {
                  "webauthnGeneratedOptionsId": {
                    "type": "string",
                    "example": "opt_123..."
                  },
                  "credential": {
                    "type": "object",
                    "required": [
                      "id",
                      "rawId",
                      "response",
                      "type"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "cred_123..."
                      },
                      "rawId": {
                        "type": "string",
                        "example": "base64rawid..."
                      },
                      "authenticatorAttachment": {
                        "type": "string",
                        "enum": [
                          "platform",
                          "cross-platform"
                        ]
                      },
                      "clientExtensionResults": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "response": {
                        "type": "object",
                        "required": [
                          "clientDataJSON",
                          "authenticatorData",
                          "signature"
                        ],
                        "properties": {
                          "clientDataJSON": {
                            "type": "string",
                            "example": "base64clientdata..."
                          },
                          "authenticatorData": {
                            "type": "string",
                            "example": "base64authenticatordata..."
                          },
                          "signature": {
                            "type": "string",
                            "example": "base64signature..."
                          },
                          "userHandle": {
                            "type": "string",
                            "example": "base64userhandle..."
                          }
                        }
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "public-key"
                        ]
                      }
                    }
                  },
                  "shouldTryLinkingWithSessionUser": {
                    "type": "boolean",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign in response",
            "headers": {
              "Set-Cookie": {
                "description": "In cookie-based sessions",
                "schema": {
                  "type": "string",
                  "example": "sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax"
                }
              },
              "st-access-token": {
                "description": "In header-based sessions",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "st-refresh-token": {
                "description": "In header-based sessions",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "anti-csrf": {
                "description": "If enabled by the user",
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "front-token": {
                "schema": {
                  "type": "string",
                  "example": "ZTRiOTBjNz...jI5MTZlODkxw"
                }
              },
              "Access-Control-Expose-Headers": {
                "schema": {
                  "type": "string",
                  "example": "anti-csrf, front-token, st-access-token, st-refresh-token"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1638433545183
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "public"
                              }
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": 36201234123
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": "rq238mrq2389rvq123213"
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "recipeId": {
                                    "type": "string",
                                    "enum": [
                                      "emailpassword",
                                      "thirdparty",
                                      "passwordless"
                                    ]
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "public"
                                    }
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1638433545183
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": 36201234123
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": "rq238mrq2389rvq123213"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "INVALID_CREDENTIALS_ERROR"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "SIGN_IN_NOT_ALLOWED"
                          ]
                        },
                        "reason": {
                          "type": "string",
                          "example": "Sign in not allowed"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/webauthn/recover/account/token": {
      "post": {
        "tags": [
          "WebAuthn Recipe"
        ],
        "operationId": "webauthnGenerateRecoverAccountToken",
        "description": "Generate a recovery token for a WebAuthn account\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "webauthn",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recovery token generation response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "RECOVER_ACCOUNT_NOT_ALLOWED"
                          ]
                        },
                        "reason": {
                          "type": "string",
                          "example": "Recover account not allowed"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/webauthn/recover/account": {
      "post": {
        "tags": [
          "WebAuthn Recipe"
        ],
        "operationId": "webauthnRecoverAccount",
        "description": "Recover a WebAuthn account\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "webauthn",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "webauthnGeneratedOptionsId",
                  "credential"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "abc123..."
                  },
                  "webauthnGeneratedOptionsId": {
                    "type": "string",
                    "example": "opt_123..."
                  },
                  "credential": {
                    "type": "object",
                    "required": [
                      "id",
                      "rawId",
                      "response",
                      "type"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "cred_123..."
                      },
                      "rawId": {
                        "type": "string",
                        "example": "base64rawid..."
                      },
                      "authenticatorAttachment": {
                        "type": "string",
                        "enum": [
                          "platform",
                          "cross-platform"
                        ]
                      },
                      "clientExtensionResults": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "response": {
                        "type": "object",
                        "required": [
                          "clientDataJSON",
                          "attestationObject"
                        ],
                        "properties": {
                          "clientDataJSON": {
                            "type": "string",
                            "example": "base64clientdata..."
                          },
                          "attestationObject": {
                            "type": "string",
                            "example": "base64attestation..."
                          },
                          "authenticatorData": {
                            "type": "string",
                            "example": "base64authenticatordata..."
                          },
                          "transports": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "usb",
                                "nfc",
                                "ble",
                                "internal",
                                "smart-card",
                                "cable",
                                "hybrid"
                              ]
                            }
                          },
                          "publicKey": {
                            "type": "string",
                            "example": "base64publickey..."
                          },
                          "publicKeyAlgorithm": {
                            "type": "number",
                            "example": -7
                          }
                        }
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "public-key"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account recovery response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                            },
                            "timeJoined": {
                              "type": "number",
                              "example": 1638433545183
                            },
                            "isPrimaryUser": {
                              "type": "boolean",
                              "example": true
                            },
                            "tenantIds": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "public"
                              }
                            },
                            "emails": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              }
                            },
                            "phoneNumbers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": 36201234123
                              }
                            },
                            "thirdParty": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "google"
                                  },
                                  "userId": {
                                    "type": "string",
                                    "example": "rq238mrq2389rvq123213"
                                  }
                                }
                              }
                            },
                            "loginMethods": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "recipeId": {
                                    "type": "string",
                                    "enum": [
                                      "emailpassword",
                                      "thirdparty",
                                      "passwordless"
                                    ]
                                  },
                                  "recipeUserId": {
                                    "type": "string",
                                    "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "tenantIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "public"
                                    }
                                  },
                                  "timeJoined": {
                                    "type": "number",
                                    "example": 1638433545183
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": 36201234123
                                  },
                                  "thirdParty": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "google"
                                      },
                                      "userId": {
                                        "type": "string",
                                        "example": "rq238mrq2389rvq123213"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "email": {
                          "type": "string",
                          "example": "johndoe@gmail.com"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "INVALID_CREDENTIALS_ERROR",
                            "RECOVER_ACCOUNT_TOKEN_INVALID_ERROR",
                            "OPTIONS_NOT_FOUND_ERROR",
                            "INVALID_OPTIONS_ERROR"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "INVALID_AUTHENTICATOR_ERROR"
                          ]
                        },
                        "reason": {
                          "type": "string",
                          "example": "Invalid authenticator"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/webauthn/credential": {
      "post": {
        "tags": [
          "WebAuthn Recipe"
        ],
        "operationId": "webauthnRegisterCredential",
        "description": "Register a new WebAuthn credential for an existing user\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "webauthn",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anti-csrf",
            "in": "header",
            "description": "This will only be here if enabled by the user.",
            "schema": {
              "type": "string",
              "example": "ZTRiOTBjNz...jI5MTZlODkxw"
            }
          }
        ],
        "security": [
          {
            "AccessTokenBearer": []
          },
          {
            "AccessTokenCookie": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "webauthnGeneratedOptionsId",
                  "credential"
                ],
                "properties": {
                  "webauthnGeneratedOptionsId": {
                    "type": "string",
                    "example": "opt_123..."
                  },
                  "credential": {
                    "type": "object",
                    "required": [
                      "id",
                      "rawId",
                      "response",
                      "type"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "cred_123..."
                      },
                      "rawId": {
                        "type": "string",
                        "example": "base64rawid..."
                      },
                      "authenticatorAttachment": {
                        "type": "string",
                        "enum": [
                          "platform",
                          "cross-platform"
                        ]
                      },
                      "clientExtensionResults": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "response": {
                        "type": "object",
                        "required": [
                          "clientDataJSON",
                          "attestationObject"
                        ],
                        "properties": {
                          "clientDataJSON": {
                            "type": "string",
                            "example": "base64clientdata..."
                          },
                          "attestationObject": {
                            "type": "string",
                            "example": "base64attestation..."
                          },
                          "authenticatorData": {
                            "type": "string",
                            "example": "base64authenticatordata..."
                          },
                          "transports": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "usb",
                                "nfc",
                                "ble",
                                "internal",
                                "smart-card",
                                "cable",
                                "hybrid"
                              ]
                            }
                          },
                          "publicKey": {
                            "type": "string",
                            "example": "base64publickey..."
                          },
                          "publicKeyAlgorithm": {
                            "type": "number",
                            "example": -7
                          }
                        }
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "public-key"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Credential registration response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "INVALID_CREDENTIALS_ERROR",
                            "OPTIONS_NOT_FOUND_ERROR",
                            "INVALID_OPTIONS_ERROR",
                            "INVALID_AUTHENTICATOR_ERROR"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "REGISTER_CREDENTIAL_NOT_ALLOWED",
                            "INVALID_AUTHENTICATOR_ERRORp"
                          ]
                        },
                        "reason": {
                          "type": "string",
                          "example": "Register credential not allowed"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{apiBasePath}/<tenantId>/webauthn/email/exists": {
      "get": {
        "tags": [
          "WebAuthn Recipe"
        ],
        "operationId": "webauthnEmailExists",
        "description": "Check if a WebAuthn email exists\n",
        "parameters": [
          {
            "name": "apiBasePath",
            "in": "path",
            "description": "Its value depends on the apiBasePath set by the user",
            "required": true,
            "schema": {
              "type": "string",
              "example": "auth"
            }
          },
          {
            "name": "rid",
            "in": "header",
            "example": "webauthn",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "johndoe@gmail.com"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email existence check response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        },
                        "exists": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "GENERAL_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "error code 404",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Not Found"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "error code 500",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Internal Error"
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "rid": {
        "name": "rid",
        "in": "header",
        "example": "session",
        "schema": {
          "type": "string"
        }
      },
      "emailPasswordRid": {
        "name": "rid",
        "in": "header",
        "example": "emailpassword",
        "schema": {
          "type": "string"
        }
      },
      "thirdPartyRid": {
        "name": "rid",
        "in": "header",
        "example": "thirdparty",
        "schema": {
          "type": "string"
        }
      },
      "passwordlessRid": {
        "name": "rid",
        "in": "header",
        "example": "passwordless",
        "schema": {
          "type": "string"
        }
      },
      "emailVerificationRid": {
        "name": "rid",
        "in": "header",
        "example": "emailverification",
        "schema": {
          "type": "string"
        }
      },
      "multitenancyRid": {
        "name": "rid",
        "in": "header",
        "example": "multitenancy",
        "schema": {
          "type": "string"
        }
      },
      "multiFactorAuthRid": {
        "name": "rid",
        "in": "header",
        "example": "multifactorauth",
        "schema": {
          "type": "string"
        }
      },
      "totpRid": {
        "name": "rid",
        "in": "header",
        "example": "totp",
        "schema": {
          "type": "string"
        }
      },
      "anti-csrf": {
        "name": "anti-csrf",
        "in": "header",
        "description": "This will only be here if enabled by the user.",
        "schema": {
          "type": "string",
          "example": "ZTRiOTBjNz...jI5MTZlODkxw"
        }
      },
      "apiBasePath": {
        "name": "apiBasePath",
        "in": "path",
        "description": "Its value depends on the apiBasePath set by the user",
        "required": true,
        "schema": {
          "type": "string",
          "example": "auth"
        }
      },
      "email": {
        "name": "email",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "example": "johndoe@gmail.com"
        }
      },
      "phoneNumber": {
        "name": "phoneNumber",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "example": "0036701234567"
        }
      },
      "webauthnRid": {
        "name": "rid",
        "in": "header",
        "example": "webauthn",
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "400": {
        "description": "error code 400",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "enum": [
                "Bad request"
              ]
            }
          }
        }
      },
      "404": {
        "description": "error code 404",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "enum": [
                "Not Found"
              ]
            }
          }
        }
      },
      "500": {
        "description": "error code 500",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "enum": [
                "Internal Error"
              ]
            }
          }
        }
      },
      "400-oauth-error": {
        "description": "error code 400 for OAuth2 errors",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "invalid_request"
                },
                "error_description": {
                  "type": "string",
                  "example": "Unsupported grant type: password"
                }
              }
            }
          }
        }
      },
      "403-factor-setup": {
        "description": "A claim validation error happened during factor setup",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "invalid claim"
                    },
                    "claimValidationErrors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "st-ev"
                          },
                          "reason": {
                            "type": "object",
                            "example": {
                              "message": "wrong value",
                              "expectedValue": true,
                              "actualValue": false
                            }
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "invalid claim"
                    },
                    "claimValidationErrors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "st-mfa"
                          },
                          "reason": {
                            "type": "string",
                            "example": "Completed factors in the session does not satisfy the MFA requirements for auth"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "schemas": {
      "statusOK": {
        "type": "string",
        "enum": [
          "OK"
        ]
      },
      "generalErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "GENERAL_ERROR"
            ]
          },
          "message": {
            "type": "string"
          }
        }
      },
      "token": {
        "type": "string",
        "example": "ZTRiOTBjNz...jI5MTZlODkxw"
      },
      "cookie": {
        "type": "string",
        "example": "ed3164...06c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax"
      },
      "id": {
        "type": "string",
        "enum": [
          "email",
          "password"
        ]
      },
      "userId": {
        "type": "string",
        "example": "fa7a0841-b533-4478-95533-0fde890c3483"
      },
      "user": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "fa7a0841-b533-4478-95533-0fde890c3483"
          },
          "timeJoined": {
            "type": "number",
            "example": 1638433545183
          },
          "isPrimaryUser": {
            "type": "boolean",
            "example": true
          },
          "tenantIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "public"
            }
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "johndoe@gmail.com"
            }
          },
          "phoneNumbers": {
            "type": "array",
            "items": {
              "type": "string",
              "example": 36201234123
            }
          },
          "thirdParty": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "google"
                },
                "userId": {
                  "type": "string",
                  "example": "rq238mrq2389rvq123213"
                }
              }
            }
          },
          "loginMethods": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "recipeId": {
                  "type": "string",
                  "enum": [
                    "emailpassword",
                    "thirdparty",
                    "passwordless"
                  ]
                },
                "recipeUserId": {
                  "type": "string",
                  "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                },
                "verified": {
                  "type": "boolean",
                  "example": true
                },
                "tenantIds": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "public"
                  }
                },
                "timeJoined": {
                  "type": "number",
                  "example": 1638433545183
                },
                "email": {
                  "type": "string",
                  "example": "johndoe@gmail.com"
                },
                "phoneNumber": {
                  "type": "string",
                  "example": 36201234123
                },
                "thirdParty": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "google"
                    },
                    "userId": {
                      "type": "string",
                      "example": "rq238mrq2389rvq123213"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "email": {
        "type": "string",
        "example": "johndoe@gmail.com"
      },
      "phoneNumber": {
        "type": "string",
        "example": "0036701234567"
      },
      "deviceId": {
        "type": "string",
        "description": "This should be saved on the starting device to enable the manual code entry flow.",
        "example": "TU/52WOcktSv99zqaAZuWJG9BSoS0aRLfCbep8rFEwk="
      },
      "preAuthSessionId": {
        "type": "string",
        "description": "An identifier that used to identify the login attempt/device.",
        "example": "kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs="
      },
      "thirdPartyId": {
        "type": "string",
        "example": "google"
      },
      "exists": {
        "type": "boolean",
        "example": true
      },
      "method": {
        "type": "string",
        "example": "token"
      },
      "code": {
        "type": "string",
        "example": "ZTRiOTBjNz...jI5MTZlODkxw"
      },
      "authCodeResponse": {
        "description": "Can contain random data other than the two listed below",
        "type": "object",
        "required": [
          "access_token"
        ],
        "properties": {
          "access_token": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          }
        }
      },
      "redirectURI": {
        "type": "string",
        "example": "https://yourdomain.com/callback"
      },
      "clientType": {
        "type": "string",
        "example": "web"
      },
      "oAuthTokens": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "example": "ZTRiOTBjNz...jI5MTZlODkxw"
          },
          "id_token": {
            "type": "string",
            "example": "ZTRiOTBjNz...jI5MTZlODkxw"
          }
        }
      },
      "formFields": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "enum": [
                "email",
                "password"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        },
        "example": [
          {
            "id": "email",
            "value": "johndoe@gmail.com"
          },
          {
            "id": "password",
            "value": "testPass123"
          }
        ]
      },
      "signInResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "OK"
            ]
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "fa7a0841-b533-4478-95533-0fde890c3483"
              },
              "timeJoined": {
                "type": "number",
                "example": 1638433545183
              },
              "isPrimaryUser": {
                "type": "boolean",
                "example": true
              },
              "tenantIds": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "public"
                }
              },
              "emails": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "johndoe@gmail.com"
                }
              },
              "phoneNumbers": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": 36201234123
                }
              },
              "thirdParty": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "google"
                    },
                    "userId": {
                      "type": "string",
                      "example": "rq238mrq2389rvq123213"
                    }
                  }
                }
              },
              "loginMethods": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "recipeId": {
                      "type": "string",
                      "enum": [
                        "emailpassword",
                        "thirdparty",
                        "passwordless"
                      ]
                    },
                    "recipeUserId": {
                      "type": "string",
                      "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                    },
                    "verified": {
                      "type": "boolean",
                      "example": true
                    },
                    "tenantIds": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "public"
                      }
                    },
                    "timeJoined": {
                      "type": "number",
                      "example": 1638433545183
                    },
                    "email": {
                      "type": "string",
                      "example": "johndoe@gmail.com"
                    },
                    "phoneNumber": {
                      "type": "string",
                      "example": 36201234123
                    },
                    "thirdParty": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "google"
                        },
                        "userId": {
                          "type": "string",
                          "example": "rq238mrq2389rvq123213"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "signInNotAllowedResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SIGN_IN_NOT_ALLOWED"
            ]
          },
          "reason": {
            "type": "string",
            "example": "Cannot sign in due to security reasons. Please try resetting your password, use a different login method or contact support. (ERR_CODE_008)"
          }
        }
      },
      "signupResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "OK"
            ]
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "fa7a0841-b533-4478-95533-0fde890c3483"
              },
              "timeJoined": {
                "type": "number",
                "example": 1638433545183
              },
              "isPrimaryUser": {
                "type": "boolean",
                "example": true
              },
              "tenantIds": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "public"
                }
              },
              "emails": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "johndoe@gmail.com"
                }
              },
              "phoneNumbers": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": 36201234123
                }
              },
              "thirdParty": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "google"
                    },
                    "userId": {
                      "type": "string",
                      "example": "rq238mrq2389rvq123213"
                    }
                  }
                }
              },
              "loginMethods": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "recipeId": {
                      "type": "string",
                      "enum": [
                        "emailpassword",
                        "thirdparty",
                        "passwordless"
                      ]
                    },
                    "recipeUserId": {
                      "type": "string",
                      "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                    },
                    "verified": {
                      "type": "boolean",
                      "example": true
                    },
                    "tenantIds": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "public"
                      }
                    },
                    "timeJoined": {
                      "type": "number",
                      "example": 1638433545183
                    },
                    "email": {
                      "type": "string",
                      "example": "johndoe@gmail.com"
                    },
                    "phoneNumber": {
                      "type": "string",
                      "example": 36201234123
                    },
                    "thirdParty": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "google"
                        },
                        "userId": {
                          "type": "string",
                          "example": "rq238mrq2389rvq123213"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "signUpNotAllowedResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SIGN_UP_NOT_ALLOWED"
            ]
          },
          "reason": {
            "type": "string",
            "example": "Cannot sign up due to security reasons. Please try resetting your password, use a different login method or contact support. (ERR_CODE_007)"
          }
        }
      },
      "passwordResetTokenResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "OK"
            ]
          }
        }
      },
      "passwordResetNotAllowedResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "PASSWORD_RESET_NOT_ALLOWED"
            ]
          },
          "reason": {
            "type": "string",
            "example": "Token generation was not done because of account take over risk. Please contact support. (HAS_OTHER_EMAIL_OR_PHONE)"
          }
        }
      },
      "signinupResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "OK"
            ]
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "fa7a0841-b533-4478-95533-0fde890c3483"
              },
              "timeJoined": {
                "type": "number",
                "example": 1638433545183
              },
              "isPrimaryUser": {
                "type": "boolean",
                "example": true
              },
              "tenantIds": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "public"
                }
              },
              "emails": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "johndoe@gmail.com"
                }
              },
              "phoneNumbers": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": 36201234123
                }
              },
              "thirdParty": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "google"
                    },
                    "userId": {
                      "type": "string",
                      "example": "rq238mrq2389rvq123213"
                    }
                  }
                }
              },
              "loginMethods": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "recipeId": {
                      "type": "string",
                      "enum": [
                        "emailpassword",
                        "thirdparty",
                        "passwordless"
                      ]
                    },
                    "recipeUserId": {
                      "type": "string",
                      "example": "fa7a0841-b533-4478-95533-0fde890c3483"
                    },
                    "verified": {
                      "type": "boolean",
                      "example": true
                    },
                    "tenantIds": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "public"
                      }
                    },
                    "timeJoined": {
                      "type": "number",
                      "example": 1638433545183
                    },
                    "email": {
                      "type": "string",
                      "example": "johndoe@gmail.com"
                    },
                    "phoneNumber": {
                      "type": "string",
                      "example": 36201234123
                    },
                    "thirdParty": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "google"
                        },
                        "userId": {
                          "type": "string",
                          "example": "rq238mrq2389rvq123213"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "createdNewRecipeUser": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "passwordResetErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "RESET_PASSWORD_INVALID_TOKEN_ERROR"
            ]
          }
        }
      },
      "passwordResetResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "OK"
            ]
          }
        }
      },
      "fieldErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "FIELD_ERROR"
            ]
          },
          "formFields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "email"
                },
                "error": {
                  "type": "string",
                  "example": "Error Message"
                }
              }
            }
          }
        }
      },
      "wrongCredentialsResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "WRONG_CREDENTIALS_ERROR"
            ]
          }
        }
      },
      "signinupErrorResponse": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "NO_EMAIL_GIVEN_BY_PROVIDER"
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "SIGN_IN_UP_NOT_ALLOWED"
                ]
              },
              "reason": {
                "type": "string",
                "example": "Cannot sign in / up due to security reasons. Please contact support. (IS_SIGN_IN_ALLOWED_FALSE)"
              }
            }
          }
        ]
      },
      "internalError": {
        "type": "string",
        "enum": [
          "Internal Error"
        ]
      },
      "badRequest": {
        "type": "string",
        "enum": [
          "Bad request"
        ]
      },
      "notFound": {
        "type": "string",
        "enum": [
          "Not Found"
        ]
      },
      "registrationPayload": {
        "type": "object",
        "required": [
          "id",
          "rawId",
          "response",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "cred_123..."
          },
          "rawId": {
            "type": "string",
            "example": "base64rawid..."
          },
          "authenticatorAttachment": {
            "type": "string",
            "enum": [
              "platform",
              "cross-platform"
            ]
          },
          "clientExtensionResults": {
            "type": "object",
            "additionalProperties": true
          },
          "response": {
            "type": "object",
            "required": [
              "clientDataJSON",
              "attestationObject"
            ],
            "properties": {
              "clientDataJSON": {
                "type": "string",
                "example": "base64clientdata..."
              },
              "attestationObject": {
                "type": "string",
                "example": "base64attestation..."
              },
              "authenticatorData": {
                "type": "string",
                "example": "base64authenticatordata..."
              },
              "transports": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "usb",
                    "nfc",
                    "ble",
                    "internal",
                    "smart-card",
                    "cable",
                    "hybrid"
                  ]
                }
              },
              "publicKey": {
                "type": "string",
                "example": "base64publickey..."
              },
              "publicKeyAlgorithm": {
                "type": "number",
                "example": -7
              }
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "public-key"
            ]
          }
        }
      },
      "authenticationPayload": {
        "type": "object",
        "required": [
          "id",
          "rawId",
          "response",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "cred_123..."
          },
          "rawId": {
            "type": "string",
            "example": "base64rawid..."
          },
          "authenticatorAttachment": {
            "type": "string",
            "enum": [
              "platform",
              "cross-platform"
            ]
          },
          "clientExtensionResults": {
            "type": "object",
            "additionalProperties": true
          },
          "response": {
            "type": "object",
            "required": [
              "clientDataJSON",
              "authenticatorData",
              "signature"
            ],
            "properties": {
              "clientDataJSON": {
                "type": "string",
                "example": "base64clientdata..."
              },
              "authenticatorData": {
                "type": "string",
                "example": "base64authenticatordata..."
              },
              "signature": {
                "type": "string",
                "example": "base64signature..."
              },
              "userHandle": {
                "type": "string",
                "example": "base64userhandle..."
              }
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "public-key"
            ]
          }
        }
      }
    },
    "securitySchemes": {
      "AccessTokenCookie": {
        "description": "This is an HTTPOnly cookie, set by sign-in and refresh endpoints and present on requests that update the access token",
        "type": "apiKey",
        "in": "cookie",
        "name": "sAccessToken"
      },
      "AccessTokenBearer": {
        "description": "Returned as the \"st-access-token\" header from sign-in and refresh endpoints and present on requests that update the access token payload",
        "type": "http",
        "scheme": "bearer"
      },
      "RefreshTokenBearer": {
        "description": "This is an HTTPOnly cookie, set by sign-in and refresh endpoints",
        "scheme": "bearer",
        "type": "http"
      },
      "RefreshTokenCookie": {
        "description": "Returned as the \"st-refresh-token\" header from sign-in and refresh endpoints",
        "type": "apiKey",
        "in": "cookie",
        "name": "sRefreshToken"
      },
      "OAuth2AccessTokenBearer": {
        "description": "An OAuth2 access token returned by the token or authorization endpoints during OAuth flows",
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}